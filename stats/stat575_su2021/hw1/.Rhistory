?rber
?rbernoulli
?rnorm
?rbern
?rbinom(1,0.1)
rbinom(10,3,.5)
rbinom(10,2,.5)
rbinom(10,1,.5)
rbinom(1,1,.5)
?rgeo
?curve
?deriv
?dcauchy
kerbimodal <- function(x) { 3*exp(-0.5*(x+2)^2) + 7*exp(-0.5*(x-2)^2) }
dom <- seq(-10,10,length=1000000)
c <- max(kerbimodal(dom)/dnorm(dom,mean=0,sd=2))
c
option(digits=10)
options(digits=10)
c
# density for biomodal density
kerbimodal <- function(x) { 3*exp(-0.5*(x+2)^2) + 7*exp(-0.5*(x-2)^2) }
kerbimodal.C <- 25.0663
dbimodal <- function(x) { kerbimodal(x) / kerbimodal.C }
dom <- seq(-10,10,length=1000000)
c <- max(kerbimodal(dom)/dnorm(dom,mean=0,sd=2))
c
kerbiomodal.C
kerbimodal.C
# accept-rejection sampling for bimodal density f
# using normal(0,2^2)
rbimodal <- function(N)
{
c <- 68.35212
xs <- vector(length=N)
k <- 1
while (T)
{
x <- rnorm(n=1,mean=0,sd=2)
if (runif(n=1) < f(x)/(c*dnorm(x,mean=0,sd=2)))
{
xs[k] <- x
k <- k + 1
if (k == N)
{
break
}
}
}
xs
}
1
1
rbimodal(10)
# accept-rejection sampling for bimodal density f
# using normal(0,2^2)
rbimodal <- function(N)
{
c <- 68.35212
xs <- vector(length=N)
k <- 1
while (T)
{
x <- rnorm(n=1,mean=0,sd=2)
if (runif(n=1) < kerbimodal(x)/(c*dnorm(x,mean=0,sd=2)))
{
xs[k] <- x
k <- k + 1
if (k == N)
{
break
}
}
}
xs
}
1
rbimodal(10)
rbimodal(10)
# accept-rejection sampling for bimodal density f
# using normal(0,2^2)
rbimodal <- function(N)
{
c <- 68.35212
xs <- vector(length=N)
k <- 1
while (T)
{
x <- rnorm(n=1,mean=0,sd=2)
if (runif(n=1) < kerbimodal(x)/(c*dnorm(x,mean=0,sd=2)))
{
xs[k] <- x
if (k == N)
{
break
}
k <- k + 1
}
}
xs
}
rbimodal(10)
n <- 10000
sample <- rbimodal(n)
hist(,freq=F,breaks=20,main="bimodal")
hist(sample,freq=F,breaks=20,main="bimodal")
curve(dbimodal(x),add=TRUE,col="red")
n <- 10000
sample <- rbimodal(n)
hist(sample,freq=F,breaks=20,main="bimodal")
curve(dbimodal(x),add=TRUE,col="red")
# density for standard half-normal
f <- function(x) { 2/sqrt(2*pi)*exp(-x^2/2) }
dom <- seq(0,10,length=10000)
c <- max(f(dom)/dexp(dom))
c
dom <- seq(0,20,length=10000000)
# density for standard half-normal
dhalfnormal <- function(x) { 2/sqrt(2*pi)*exp(-x^2/2) }
c <- max(dhalfnormal(dom)/dexp(dom))
c
?dgeom
?rbinom(.2)
rbinom(.2)
rbinom(1,.2)
?rbinom
rbinom(1,1,.2)
rbinom(10,1,.2)
mean(rbinom(10,1,.2))
mean(rbinom(1090,1,.2))
rbinom(1090,1,.2)
rbinom(1,1,.2)
rbinom(1,1,.2)
rbinom(1,1,.2)
rbinom(1,1,.2)
rbinom(1,1,.2)[1]
rbinom(1,1,.2)[[1]]
rbinom(1,1,.2)[[1]]
class(rbinom(1,1,.2))
?barplot
?seq
?seq
read.table("ache.txt",header=T)
d <- read.table("ache.txt",header=T)
d
View(d)
rep(1,3)
cbind(rep(1,n),d$age)
cbind(rep(1,n),d$age)
n <- length(d$age)
n
cbind(rep(1,n),d$age)
cbind(rep(1,n),d$age,d$age^2)
exp(d$days)
X <- cbind(rep(1,n),d$age,d$age^2)
X%*%theta
theta <- c(6,1,1)
X%*%theta
X%*%theta
log(d$days)+X%*%theta
exp(log(d$days)+X%*%theta)
exp(log(d$days)+X%*%theta)
theta <- c(6,1,0.05)
exp(log(d$days)+X%*%theta)
theta <- c(6,1,0.05)
theta <- c(6,1,0.01)
exp(log(d$days)+X%*%theta)
dpois(d$monkeys,exp(log(d$days)+X%*%theta))
dpois(d$monkeys,exp(log(d$days)+X%*%theta),log=T)
dpois(d$monkeys,exp(log(d$days)+X%*%theta),log=F)
dpois(d$monkeys,log(d$days)+X%*%theta,log=F)
dpois(d$monkeys,log(d$days)+X%*%theta,log=)
dpois(d$monkeys,exp(log(d$days)+X%*%theta),log=T)
sum(dpois(d$monkeys,exp(log(d$days)+X%*%theta),log=T))
theta[1] * theta[2] + (theta[1])^2
f(1,1)
f(c(1,1))
f <- function(theta)
{
theta[1] * theta[2] + (theta[1])^2
}
f
f(0)
f(0,0)
f(c(0,0))
f(c(1,1))
f(c(1,1))
?jacobian
library(numDeriv)
?jacobian
jacobian(f,c(1,1))
grad(f,c(1,1))
hessian(f)
hessian(f,c(1,1))
inv(hessian(f,c(1,1)))
inv
inverse
?inverse
?inv
solve
?solve
solve(hessian(f,c(1,1)))
print(sol)
plot(dbeta(seq(0,1,.01),.01,.01))
seq(0,1,.01),.01,.01)
seq(0,1,.01)
plot(dbeta(seq(0,1,.01),.001,.001))
plot(dbeta(seq(0,1,.01),.0001,.0001))
plot(dbeta(seq(0,1,.01),1,1))
d <- read.table("ache.txt", header=T)
n <- length(d$age)
X <- cbind(rep(1,n), d$age, d$age^2)
loglike <- function(theta)
{
sum(dpois(d$monkeys,exp(log(d$days)+X%*%theta),log=T))
}
X
d$days
log(d$days)
log(d$days)+X%*%c(1,2,3)
log(d$days)+X%*%c(1,2,3)
cols(c(1,2))
class(c(1,2))
colnames(c(1,2))
cols(c(1,2))
numcols(c(1,2))
ncol(c(1,2))
dim(c(1,2))
c(1,2)
theta <- c(1,2)
theta
t(theta)
t(t(theta))
theta <- t(t(theta))
X
X%*%theta
X
theta
theta <- c(1,2,3)
theta <- t(t(theta))
X%*%theta
dim(X%*%theta)
theta <- c(1,2,3)
theta <- t(theta)
theta
