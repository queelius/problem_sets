beta <- beta / N
mu <- mu_num / mu_denom
lam <- lam_num / lam_denom
c(alpha,beta,mu,lam)
}
em <- function(theta,ns,steps=10000)
{
steps <- 10000
for(i in 1:steps)
{
theta = update(theta,ns)
if (i %% 1000 == 0) cat("iteration =",i," theta = (",theta,")'\n")
}
theta
}
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns)
# we observe n = (n0,n1,...,n16)
ns <- c(379,299,222,145,109,95,73,59,45,30,24,12,4,2,0,1,1)
N <- sum(ns)
# theta := (alpha, beta, mu, lambda)'
# note that there is an implicit parameter gamma s.t.
# alpha + beta + gamma = 1
# the initial value assumes each category z, t, or p
# is equally probable, and so we let
#     (alpha^(0),beta^(0)) = (1/3,1/3)
# and mu^(0) and lambda^(0) are just arbitrarily chosen to be 2 and 3,
# with the insight that group 3 is more risky than group 2.
theta <- c(1/3,1/3,2,3)
# theta := (alpha, beta, mu, lambda)
Pi <- function(i,theta)
{
res <- 0
if (i == 0)
res <- theta[1]
res <- res + theta[2] * theta[3]^i * exp(-theta[3])
res <- res + (1 - theta[1] - theta[2]) * theta[4]^i * exp(-theta[4])
res
}
z0 <- function(theta)
{
theta[1] / Pi(0,theta)
}
t <- function(i,theta)
{
theta[2] * theta[3]^i * exp(-theta[3]) / Pi(i,theta)
}
p <- function(i,theta)
{
(1-theta[1] - theta[2]) * theta[4]^i * exp(-theta[4]) / Pi(i,theta)
}
# update algorithm, based on EM algorithm
update <- function(theta,ns)
{
# note: n0 := ns[1] instead of ns[0] since R does not use zero-based indexes
alpha <- ns[1] * z0(theta) / N
beta <- 0
mu_num <- 0
mu_denom <- 0
lam_num <- 0
lam_denom <- 0
for (i in 0:16)
{
ti <- t(i,theta)
pi <- p(i,theta)
beta <- beta + ns[i+1] * ti
mu_num <- mu_num + i * ns[i+1] * ti
mu_denom <- mu_denom + ns[i+1] * ti
lam_num <- lam_num + i * ns[i+1] * pi
lam_denom <- lam_denom + ns[i+1] * pi
}
beta <- beta / N
mu <- mu_num / mu_denom
lam <- lam_num / lam_denom
c(alpha,beta,mu,lam)
}
em <- function(theta,ns,steps=10000)
{
steps <- 10000
for(i in 1:steps)
{
theta = update(theta,ns)
if (i %% 1000 == 0) cat("iteration =",i," theta = (",theta,")'\n")
}
theta
}
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns)
# ns = (379,299,222,145,109,95,73,59,45,30,24,12,4,2,0,1,1)
# 379 responded 0 encounters
# 299 responded 1 encounters
# 222 responded 2 encounters
# ...
# 1 responded 16 encounters
#
# to resample, we resample from the data set that includes each
# persons response, as determined by ns.
data <- NULL
for (i in 1:length(ns))
{
data <- append(data,rep((i-1),ns[i]))
}
make_into_counts <- function(data)
{
ns <- NULL
for (i in 0:16)
{
ni <- data[data == i]
l <-length(ni)
ns <- append(ns,l)
}
ns
}
thetas <- vector(length=m)
thetas[1] <- em(theta,ns)
m <- 1000 # bootstrap replicates
thetas <- vector(length=m)
thetas[1] <- em(theta,ns)
em <- function(theta,ns,steps=10000,debug=T)
{
steps <- 10000
for(i in 1:steps)
{
theta = update(theta,ns)
if (debug==T && i %% 1000 == 0) { cat("iteration =",i," theta = (",theta,")'\n") }
}
theta
}
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns,F)
em <- function(theta,ns,steps=10000,debug=T)
{
steps <- 10000
for(i in 1:steps)
{
theta = update(theta,ns)
if (debug==T && i %% 1000 == 0) { cat("iteration =",i," theta = (",theta,")'\n") }
}
theta
}
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns,F)
em <- function(theta,ns,steps=10000,debug=T)
{
steps <- 10000
for(i in 1:steps)
{
theta = update(theta,ns)
if (debug==T)
{
if (i %% 1000 == 0) { cat("iteration =",i," theta = (",theta,")'\n") }
}
}
theta
}
em <- function(theta,ns,steps=10000,debug=T)
{
for(i in 1:steps)
{
theta = update(theta,ns)
if (debug==T)
{
if (i %% 1000 == 0) { cat("iteration =",i," theta = (",theta,")'\n") }
}
}
theta
}
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns,10000,F)
sol
m <- 1000 # bootstrap replicates
thetas <- vector(length=m)
steps <- 10000
thetas[1] <- em(theta,ns,steps,F))
thetas[1] <- em(theta,ns,steps,F)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
print(resample)
return(1)
for(i in 1:steps)
{
theta <- update(theta,resampled)
}
thetas[i] <- theta
if (i %% 1000 == 0) { cat("iteration", i, ": ", theta) }
thetas
}
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
print(resampled)
return(1)
for(i in 1:steps)
{
theta <- update(theta,resampled)
}
thetas[i] <- theta
if (i %% 1000 == 0) { cat("iteration", i, ": ", theta) }
thetas
}
ns
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
thetas[i] <- em(theta,resampled,steps,F)
if (i %% 1000 == 0) { cat("iteration", i, ": ", theta) }
thetas
}
for (i in 2:5)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
print(ns)
print(resampled)
thetas[i] <- em(theta,resampled,steps,F)
if (i %% 1000 == 0) { cat("iteration", i, ": ", theta) }
thetas
}
steps <- 10000
thetas[1] <- em(theta,ns,steps,F)
thetas[1] <- em(theta,ns,steps,F)
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns,10000,F)
# solution theta = (alpha, beta, mu, lambda)
sol <- em(theta,ns,10000,T)
#thetas <- vector(length=m)
steps <- 10000
print(em(theta,ns,steps,F))
for (i in 2:5)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
print(em(theta,resampled,steps,F))
#print(ns)
#print(resampled)
#thetas[i] <- em(theta,resampled,steps,F)
#if (i %% 1000 == 0) { cat("iteration", i, ": ", theta) }
}
thetas <- append(thetas,em(theta,ns,steps,F))
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
thetas <- append(thetas,em(theta,resampled,steps,F))
#print(ns)
#print(resampled)
#thetas[i] <- em(theta,resampled,steps,F)
#if (i %% 1000 == 0) { cat("iteration", i, ": ", theta) }
}
steps <- 10000
thetas <- NULL
theta.bs <- em(theta,ns,steps,F)
print(theta.bs)
thetas <- append(thetas,theta.bs)
thetas
steps <- 10
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
#print(ns)
#print(resampled)
#thetas[i] <- em(theta,resampled,steps,F)
cat("iteration", i, ": ", theta.bs)
}
thetas <- NULL
steps <- 10
theta.bs <- em(theta,ns,steps,F)
print(theta.bs)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
#print(ns)
#print(resampled)
#thetas[i] <- em(theta,resampled,steps,F)
cat("iteration", i, ": ", theta.bs, "\n")
}
m <- 10 # bootstrap replicates
thetas <- NULL
steps <- 10000
theta.bs <- em(theta,ns,steps,F)
theta.bs <- em(theta,ns,steps,F)
print(theta.bs)
thetas <- append(thetas,theta.bs)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
#print(ns)
#print(resampled)
#thetas[i] <- em(theta,resampled,steps,F)
cat("iteration", i, ": ", theta.bs, "\n")
}
m <- 1000 # bootstrap replicates
thetas <- NULL
steps <- 1000
theta.bs <- em(theta,ns,steps,F)
m <- 1000 # bootstrap replicates
thetas <- NULL
steps <- 1000
theta.bs <- em(theta,ns,steps,F)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
# cat("iteration", i, ": ", theta.bs, "\n")
}
m <- 1000 # bootstrap replicates
thetas <- NULL
steps <- 1000
theta.bs <- em(theta,ns,steps,F)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
m <- 500 # bootstrap replicates
thetas <- NULL
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
m <- 500 # bootstrap replicates
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
print(variance(thetas))
var(thetas)
thetas
print(cov(thetas))
m <- 100 # bootstrap replicates
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- cbind(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- cbind(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- cbind(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
print(thetas)
thetas <- cbind(thetas,theta.bs)
```{r}
# ns = (379,299,222,145,109,95,73,59,45,30,24,12,4,2,0,1,1)
# 379 responded 0 encounters
# 299 responded 1 encounters
# 222 responded 2 encounters
# ...
# 1 responded 16 encounters
#
# to resample, we resample from the data set that includes each
# persons response, as determined by ns.
data <- NULL
for (i in 1:length(ns))
{
data <- append(data,rep((i-1),ns[i]))
}
make_into_counts <- function(data)
{
ns <- NULL
for (i in 0:16)
{
ni <- data[data == i]
l <-length(ni)
ns <- append(ns,l)
}
ns
}
m <- 100 # bootstrap replicates
thetas <- NULL
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- cbind(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- cbind(thetas,theta.bs)
cat("iteration", i, ": ", theta.bs, "\n")
}
print(thetas)
m <- 1000 # bootstrap replicates
thetas <- NULL
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- cbind(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- cbind(thetas,theta.bs)
if (i %% 100 == 0) { cat("iteration", i, ": ", theta.bs, "\n") }
}
print(thetas)
print(thetas)
cov(thetas)
thetas[1,]
thetas[,1]
thetas
m <- 100 # bootstrap replicates
thetas <- NULL
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- append(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- append(thetas,theta.bs)
if (i %% 100 == 0) { cat("iteration", i, ": ", theta.bs, "\n") }
}
thetas
thetas[1,]
thetas[1]
m <- 100 # bootstrap replicates
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- rbind(thetas,theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- rbind(thetas,theta.bs)
if (i %% 100 == 0) { cat("iteration", i, ": ", theta.bs, "\n") }
}
thetas
?rbind
rbind(1:3,2:4)
rbind(rbind(1:3,2:4),3:5)
View(thetas)
theta.bs
theta.bs
mat <- NULL
rbind(theta.bs)
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- rbind(theta.bs)
thetas
rbind(theta.bs,theta.bs)
steps <- 500
theta.bs <- em(theta,ns,steps,F)
thetas <- rbind(theta.bs)
for (i in 2:m)
{
indices <- sample(N,N,replace=T)
resampled <- make_into_counts(data[indices])
theta.bs <- em(theta,resampled,steps,F)
thetas <- rbind(thetas,theta.bs)
if (i %% 100 == 0) { cat("iteration", i, ": ", theta.bs, "\n") }
}
thetas
cov(thetas)
cor(thetas)
library(prob.4.2.comp.stats)
?em.counts_to_responses
help("hw2_covariance.Rmd")
help(package="prob.4.2.comp.stats")
