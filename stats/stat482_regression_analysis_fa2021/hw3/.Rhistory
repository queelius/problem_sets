N <- n+burn
thetas <- matrix(nrow=N,ncol=2)
if (is.null(theta0)) { thetas[1,] <- prior() }
for (i in 1:(N-1))
{
if (flip())
{
mu.new <- rmu(thetas[i,2])
tau.new <- rtau(mu.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
else
{
tau.new <- rtau(thetas[i,1])
mu.new <- rmu(tau.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
}
thetas <- thetas[(burn+1):N,]
mu.est <- mean(thetas[,1])
tau.est <- mean(thetas[,2])
sigma.est <- sqrt(1/tau.est)
hist(thetas)
list(mu.est=mu.est,tau.est=tau.est,sigma.est=sigma.est)
}
mu.tau.gibbs(100000,xs)
mu.tau.gibbs <- function(n,xs,theta0=NULL,burn=1000,
p=0.0001,m=0,a=0.0001,b=0.0001)
{
xs.mean <- mean(xs)
xs.s2 <- var(xs)
xs.n <- length(xs)
rmu <- function(tau)
{
mean <- (xs.n*tau*xs.mean + p*m) / (xs.n*tau + p)
var <- 1/(xs.n*tau + p)
rnorm(1,mean=mean,sd=sqrt(var))
}
rtau <- function(mu)
{
rgamma(1,shape=a+xs.n/2,rate=b+xs.n*(xs.s2+(mu-xs.mean)^2)/2)
}
prior <- function() { c(rnorm(1,m,1/p),rgamma(1,a,b)) }
flip <- function() { runif(1) < 0.5 }
N <- n+burn
thetas <- matrix(nrow=N,ncol=2)
if (is.null(theta0)) { thetas[1,] <- prior() }
for (i in 1:(N-1))
{
if (flip())
{
mu.new <- rmu(thetas[i,2])
tau.new <- rtau(mu.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
else
{
tau.new <- rtau(thetas[i,1])
mu.new <- rmu(tau.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
}
thetas <- thetas[(burn+1):N,]
mu.est <- mean(thetas[,1])
tau.est <- mean(thetas[,2])
sigma.est <- sqrt(1/tau.est)
list(theta.dist=thetas,mu.est=mu.est,tau.est=tau.est,sigma.est=sigma.est)
}
mu.tau.gibbs(10000,xs)
mu.tau.gibbs(10000,xs)$theta.dist
plot(mu.tau.gibbs(10000,xs)$theta.dist)
plot(res$theta.dist[1000:1200,])
res <- mu.tau.gibbs(10000,x)
plot(res$theta.dist[1000:1200,])
x <- rnorm(200,mean=5,sd=2)
res <- mu.tau.gibbs(10000,x)
res$mu.est
res$tau.est
plot(res$theta.dist[1000:1200,])
plot(res$theta.dist[1000:1200,])
plot(res$theta.dist[1000:2000,])
plot(res$theta.dist[3000:4000,])
plot(res$theta.dist[5000:6000,])
plot(res$theta.dist[6000:6500,])
res
res[3]
1/res[3]
1./res[3]
sigma <- res$sigma.est
sigma
res$sigma.est
res[3]
res[4]
sigma <- res[4]
sigma
sigma
class(sigma)
sigma[1]
sigma[2]
sigma[1][1]
sigma[1][1][1]
as.numeric(sigma[1])
?dgamma
x <- read.table("coal.txt",header=T)[,2]
N <- length(x)
t <- function(theta) { sum(x[1:theta]) }
rlambda1 <- function(n,theta) { rgamma(n,t(theta)+1,theta+1) }
rlambda2 <- function(n,theta) { rgamma(n,t(N)-t(theta)+1,N-theta+1) }
ktheta <- Vectorize(function(theta,lambda1,lambda2)
{
(lambda1/lambda2)^t(theta)*exp(theta*(lambda2-lambda1))
},"theta")
ptheta <- function(theta,lambda1,lambda2)
{
Z <- sum(ktheta(1:N,lambda1,lambda2))
ktheta(theta,lambda1,lambda2)/Z
}
rtheta = function(n,lambda1,lambda2)
{
sample(x=1:N,n,replace=T,prob=ptheta(1:N,lambda1,lambda2))
}
ptheta(1)
ptheta(1,3,2)
sum(ptheta(1:N,3,2)
)
sum(ptheta(1:N,3,2))
N
sum(ptheta(1:N,3,2))
ptheta(1:N,3,2)
rtheta(100,3,2)
rtheta(1000,4,4)
warnings()
?floor
# thse compute the standardized weights
w = function(x) {
out <- q(x)/g(x)
out/sum(out)
}
h <- function(x) { x^2 }
ry <- function(n)
{
ys <- numeric(n)
ws <- rexp(n=n,rate=1)
us <- runif(n)
for (i in 1:n) { ys[i] <- ifelse(us[i] < 0.5,-ws[i],ws[i]) }
ys
}
q <- function(x) { exp(x)/(exp(2*x)+1) }
g <- function(x) { exp(-abs(x)) }
n=100
m=500
ys=ry(m)
ys
ws=w(ys)
ws
xs <- sample(ys,n,replace=T,prob=ws)
xs
w(xs)
w(xs)
xs <- sample(ys,n,replace=T,prob=ws)
c(1,2,3)*c(1,2,3)
mean(c(1,2,3)*c(1,2,3))
ys <- ry(m)
ws <- w(ys)
ws
ws*ys
ys
ws*ys
ys
mean(ws*ys)
m <- n*floor(sqrt(n))
ys <- ry(m)
ws <- w(ys)
mean(w(xs)*h(xs))
ys
ys^2
rx.transform <- function(n)
{
us <- runif(n)
log(tan(pi/2*us))
}
x <- rx.transform(10000)
print(mean(x^2))
xss <- seq(0.01,10.0,by=.01))
xss <- seq(0.01,10.0,by=.01)
yss <- g(seq(0.01,10.0,by=.01))
max(yss)
yss <- g(seq(0.001,10.0,by=.001))
max(yss)
yss <- g(seq(0.0001,10.0,by=.0001))
max(yss)
sum(ws*ys)
rx.importance(1000)
ls
?sample
?matrix
rtheta.prior <- function(n)
{
samp <- matrix(nrow=n,ncol=3)
samp[,1] <- rgamma(n,shape=3,rate=1)
samp[,2] <- rgamma(n,shape=3,rate=1)
samp[,3] <- sample(n:(N-1),1,replace=T)
samp
}
gibbs <- function(n,burn=1000,prior=rtheta.prior)
{
t <- function(theta) { sum(x[1:theta]) }
rlambda1 <- function(theta) { rgamma(t(theta)+1,theta+1) }
rlambda2 <- function(theta) { rgamma(t(N)-t(theta)+1,N-theta+1) }
ktheta <- Vectorize(function(theta,lambda1,lambda2)
{
if (theta < 1 || theta >= N) { return(0) }
(lambda1/lambda2)^t(theta)*exp(theta*(lambda2-lambda1))
},"theta")
ptheta <- function(theta,lambda1,lambda2)
{
Z <- sum(ktheta(1:N,lambda1,lambda2))
ktheta(theta,lambda1,lambda2)/Z
}
rtheta = function(lambda1,lambda2)
{
sample(x=1:N,n,replace=T,prob=ptheta(1:N,lambda1,lambda2))
}
nn <- n+burn
thetas <- matrix(nrow=nn,ncol=3)
thetas[1,] <- prior(1)
print(thetas[1,])
#for (i in 1:(nn-1))
#{
#  theta.new <- rtheta(thetas[i,2],thetas[i,3])
#  lambda1.new <- rlambda1(theta.new)
#  lambda2.new <- rlambda2(theta.new)
#  thetas[i+1,] <- c(theta.new,lambda1.new,lambda2.new)
#}
#thetas <- thetas[(burn+1):nn,]
#theta.est <- mean(thetas[,1])
#lambda1.est <- mean(thetas[,2])
#lambda2.est <- mean(thetas[,3])
#list(theta.dist=thetas,
#     theta.est=theta.est,
#     lambda1.est=lambda1.est,
#     lambda2.est=lambda2.est)
}
gibbs(10)
x <- read.table("coal.txt",header=T)[,2]
N <- length(x)
x
N
class(x)
type(x)
x
numeric(10)
class(numeric(10))
ktheta <- Vectorize(function(theta)
{
if (theta < 1 || theta >= N) { return(0) }
(lambda1/lambda2)^t(theta)*exp(theta*(lambda2-lambda1))
})
lambda1 <- 2
lambda2 <- 3
N <- 112
ktheta(1)
ktheta(111)
ktheta(112)
ktheta(113)
ktheta(1:N)
sum(ktheta(1:N))
ktheta(1:N)
sum(ktheta(1:N))
sample(x=1:(N-1),n,replace=T,prob=ktheta(1:(N-1)))
sample(x=1:N,n,replace=T,prob=ktheta(1:N))
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/2)
sum(ktheta(1:N))
Z <- sum(ktheta(1:N))
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
ktheta(1:N)/Z
sum(ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z/10)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z/10000)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
lambda1
lambda1=3
lambda2=.925
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
ktheta(1:N)/Z
Z <- sum(ktheta(1:N))
Z
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
prob=ktheta(1:N)/Z
prob
cumsum(prob)
install.packages("ISLR2")
?ISLR2
?islr2
remotes::install_github("rstudio/blogdown")
ls
load(.Rdata)
load(".Rdata")
blowdown::serve_site()
blogdown::serve_site()
ls
blogdown::serve_site()
blogdown::serve_site()
getwd()
getwd()
setwd("hw")
getwd()
# the tabulated data is provided by the file accompanying file named 'CH01PR27.txt'.
# the original URL for this data is:
#     http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%20%201%20Data%20Sets/CH01PR27.txt
mass.data = read.table('CH01PR27.txt')
colnames(mass.data)=c("mass","age")
# the model for muscle mass, mass[i] = beta0 + beta1 * age[i] + e[i]
# where e[i] ~ N(0,sigma2).
mass.mod = lm(mass ~ age, data=mass.data)
mass.mod
mass.mod$residuals
mass.mod$effects
mass.mod$xlevels
mass.mod$qr
mass.mod$model
mass.mod$fitted.values
summary(mass.mod)
summary(mass.mod)$sigma
mass.mod$residuals
getwd()
mass.data = read.table('CH01PR27.txt')
colnames(mass.data)=c("mass","age")
mass.mod = lm(mass ~ age, data=mass.data)
summary(mass.mod)
s=summary(mass.mod)
s
s$coefficients
s$sigma
s$df
length(s$df)
s$coefficients
s$coefficients$age
s$coefficients[1]
s$coefficients[2]
s$coefficients[2,]
?confint
knitr::opts_chunk$set(echo = TRUE)
# install mosaic package if necessary
if (!require(mosaic)) install.packages(`mosaic`)
# install mosaic package if necessary
if (!require(mosaic)) install.packages(`mosaic`)
# load the package in R
library(mosaic) # load the package mosaic to use its functions
chickwts
mean(chickwts)
mean(chickwts$weight)
mean(~ chickwts$weight)
mean(~ weight, data=chickwts)
?mean
mosaic::mean(~ weight, data=chickwts)
?tally
tally(~ weights, data=chickwts)
tally(~ feed, data=chickwts)
use(chickwts)
chickwts
head(chickwts)
str(chkwts)
str(chickwts)
chickwts$feed
x<-(chickwts$feed)
x
x
x$levels
x$level
str(x)
tally(~ feed, data = chickwts)
tally(chickwts$feed)
mean(weight ~ feed, data=chickwts)
mean(weight[feed=='casein'], data=chickwts)
mean(weight[feed=="casein"], data=chickwts)
mean(weight[feed=="casein"], data=chickwts)
chickwts[chickwts$feed=='casein']
chickwts$feed=='casein'
chickwts[chickwts$feed=='casein']
chickwts$weight[chickwts$feed=='casein']
mean(chickwts$weight[chickwts$feed=='casein'])
mean(weight ~ feed, data=chickwts)
tally(weight ~ feed,data=chickwts)
favstats(~ weights,data=chickwts)
favstats(~ weight, data=chickwts)
favstats(weight, data=chickwts)
favstats(weight~, data=chickwts)
favstats(weight ~, data=chickwts)
favstats(weight ~ feed, data=chickwts)
bargraph(~ feed,data=chickwts)
bargraph(weight ~ feed,data=chickwts)
bargraph(~ feed, data=chickwts)
bargraph(~ weight,data=chickwts)
bargraph(~ feed,data=chickwts)
dotPlot(~ feed,data=chickwts)
dotPlot(~ weight,data=chickwts)
hist(weight,data=chickwts)
hist(chickwts$weight)
hist(chickwts$feed)
hist(chickwts$feed)
hist(as.numeric(chickwts$feed))
stem(chickwts$weight)
?stem
chickwts$weight
min(chickwts$weight)
max(chickwts$weight)
chickwts$weight[chickwts$weight<150]
chickwts$weight[chickwts$weight>=150 && chickwts$weight<160]
chickwts$weight>=150 && chickwts$weight<160
chickwts$weight>=150 & chickwts$weight<160
chickwts$weight[chickwts$weight>=150 & chickwts$weight<160]
chickwts$weight[chickwts$weight>=150 & chickwts$weight<=160]
seq(1,100,by=5)
stem(seq(1,100,by=5))
chickwts$weight[chickwts$weight<=155]
?goal
dotPlot(~ weight, data=chickwts)
dotPlot(~ weight, data=chickwts,cex=.8)
dotPlot(~ weight | feed, data=chickwts, cex=.8)
dotPlot(weight ~ feed | feed, data=chickwts, cex=.8)
dotPlot(weight ~ feed, data=chickwts, cex=.8)
dotPlot(weight | feed, data=chickwts, cex=.8)
dotPlot(weight ~ | feed, data=chickwts, cex=.8)
dotPlot(~ weight | feed, data=chickwts, cex=.8)
dotPlot(weight ~ feed, data=chickwts, cex=.8)
dotPlot(weight | feed, data=chickwts, cex=.8)
dotPlot(~ weight | feed, data=chickwts, cex=.8)
dotPlot(weight ~ feed, data=chickwts, cex=.8)
dotPlot(weight ~, data=chickwts, cex=.8)
dotPlot(~weight, data=chickwts, cex=.8)
dotPlot(~weight, data=chickwts, cex=.8)
bwplot(weight ~ feed)
bwplot(weight ~ feed, data=chickwts)
bwplot(weight | feed, data=chickwts)
bwplot(weight ~ | feed, data=chickwts)
bwplot(~weight | feed, data=chickwts)
wireless.data <- read.csv("https://goo.gl/72BKSf", header = TRUE)
favstats(Wireless ~ Region, data=wireless.data)
wireless.data
head(wireless.data)
favstats(Wireless ~ Region, data=wireless.data)
dotPlot(~ Wireless | Region, data=wireless.data)
bwplot(~ Wireless | Region, data=wireless.data)
dotPlot(~ Wireless | Region, data=wireless.data)
bwplot(~ Wireless | Region, data=wireless.data)
bwplot(Wireless ~ | Region, data=wireless.data)
bwplot(Wireless ~ Region, data=wireless.data)
str(iris)
iris$Sepal.Length
mean(iris$Sepal.Length)
# (iii)
mean(Sepal.Length ~ Species, data = iris)
# (iv)
sd(iris$Sepal.Length)
sd(Sepal.Length ~ Species, data = iris)
# (v)
histogram(Sepal.Length, data = iris)
# (v)
histogram(~ Sepal.Length, data = iris)
bwplot(Sepal.Length ~ Species, data=iris)
# (i)
mean(~BatAge, data=mlb16.data)
# load the data set
mlb16.data <- read.csv("https://raw.githubusercontent.com/jpailden/rstatlab/master/data/MLB-TeamBatting-S16.csv")
# (i)
mean(~BatAge, data=mlb16.data)
mean(BatAge,data==mlb16.data)
mean(mlb16.data$BatAge)
# (i)
mean(~BatAge,~BatAge, data=mlb16.data)
# (ii)
dotPlot(~ RPG, data==mlb16.data))
# (ii)
dotPlot(~ RPG, data==mlb16.data)
# (ii)
dotPlot(RPG~, data==mlb16.data)
# (ii)
dotPlot(~ RPG, data=mlb16.data)
mean(RPG ~, data=mlb16.data)
mean(~RPG, data=mlb16.data)
mean(~, data=mlb16.data)
mean(RPG ~ Lg, data=mlb16.data)
mean(H ~ Lg, data=mlb16.data)
View(mlb16.data)
data = read.table('CH01PR20.txt')
print(data)
data = read.table('CH01PR20.txt')
colnames(data)=c("copiers","time")
print(data)
mod = lm(time~copiers, data=data)
data = read.table('CH01PR20.txt')
colnames(data)=c("time","copiers")
mod = lm(time~copiers, data=data)
summary(mod)
confint(mod)
predict(mod,data.frame(copiers=3),interval="confidence")
predict(mod,data.frame(copiers=3),interval="predict")
predict(mod,data.frame(copiers=3),interval="confidence")
predict(mod,data.frame(copiers=3),interval="predict")
?qt
?predict
?predict
?rt
ys = y.hat + se.y.hat*rt(10000,n-2)
?hist
