tau.est <- mean(thetas[,2])
sigma.est <- sqrt(1/tau.est)
list(density=density(thetas),mu.est=mu.est,tau.est=tau.est,sigma.est=sigma.est)
}
mu.tau.gibbs(1000,xs)
plot(mu.tau.gibbs(1000,xs)$density)
mu.tau.gibbs <- function(n,xs,theta0=NULL,burn=1000,
p=0.0001,m=0,a=0.0001,b=0.0001)
{
xs.mean <- mean(xs)
xs.s2 <- var(xs)
xs.n <- length(xs)
rmu <- function(tau)
{
mean <- (xs.n*tau*xs.mean + p*m) / (xs.n*tau + p)
var <- 1/(xs.n*tau + p)
rnorm(1,mean=mean,sd=sqrt(var))
}
rtau <- function(mu)
{
rgamma(1,shape=a+xs.n/2,rate=b+xs.n*(xs.s2+(mu-xs.mean)^2)/2)
}
prior <- function() { c(rnorm(1,m,1/p),rgamma(1,a,b)) }
flip <- function() { runif(1) < 0.5 }
N <- n+burn
thetas <- matrix(nrow=N,ncol=2)
if (is.null(theta0)) { thetas[1,] <- prior() }
for (i in 1:(N-1))
{
if (flip())
{
mu.new <- rmu(thetas[i,2])
tau.new <- rtau(mu.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
else
{
tau.new <- rtau(thetas[i,1])
mu.new <- rmu(tau.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
}
thetas <- thetas[(burn+1):N,]
mu.est <- mean(thetas[,1])
tau.est <- mean(thetas[,2])
sigma.est <- sqrt(1/tau.est)
list(density=dmvnorm(thetas),mu.est=mu.est,tau.est=tau.est,sigma.est=sigma.est)
}
mu.tau.gibbs(10000,xs)
mu.tau.gibbs <- function(n,xs,theta0=NULL,burn=1000,
p=0.0001,m=0,a=0.0001,b=0.0001)
{
xs.mean <- mean(xs)
xs.s2 <- var(xs)
xs.n <- length(xs)
rmu <- function(tau)
{
mean <- (xs.n*tau*xs.mean + p*m) / (xs.n*tau + p)
var <- 1/(xs.n*tau + p)
rnorm(1,mean=mean,sd=sqrt(var))
}
rtau <- function(mu)
{
rgamma(1,shape=a+xs.n/2,rate=b+xs.n*(xs.s2+(mu-xs.mean)^2)/2)
}
prior <- function() { c(rnorm(1,m,1/p),rgamma(1,a,b)) }
flip <- function() { runif(1) < 0.5 }
N <- n+burn
thetas <- matrix(nrow=N,ncol=2)
if (is.null(theta0)) { thetas[1,] <- prior() }
for (i in 1:(N-1))
{
if (flip())
{
mu.new <- rmu(thetas[i,2])
tau.new <- rtau(mu.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
else
{
tau.new <- rtau(thetas[i,1])
mu.new <- rmu(tau.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
}
thetas <- thetas[(burn+1):N,]
mu.est <- mean(thetas[,1])
tau.est <- mean(thetas[,2])
sigma.est <- sqrt(1/tau.est)
hist(thetas)
list(mu.est=mu.est,tau.est=tau.est,sigma.est=sigma.est)
}
mu.tau.gibbs(100000,xs)
mu.tau.gibbs <- function(n,xs,theta0=NULL,burn=1000,
p=0.0001,m=0,a=0.0001,b=0.0001)
{
xs.mean <- mean(xs)
xs.s2 <- var(xs)
xs.n <- length(xs)
rmu <- function(tau)
{
mean <- (xs.n*tau*xs.mean + p*m) / (xs.n*tau + p)
var <- 1/(xs.n*tau + p)
rnorm(1,mean=mean,sd=sqrt(var))
}
rtau <- function(mu)
{
rgamma(1,shape=a+xs.n/2,rate=b+xs.n*(xs.s2+(mu-xs.mean)^2)/2)
}
prior <- function() { c(rnorm(1,m,1/p),rgamma(1,a,b)) }
flip <- function() { runif(1) < 0.5 }
N <- n+burn
thetas <- matrix(nrow=N,ncol=2)
if (is.null(theta0)) { thetas[1,] <- prior() }
for (i in 1:(N-1))
{
if (flip())
{
mu.new <- rmu(thetas[i,2])
tau.new <- rtau(mu.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
else
{
tau.new <- rtau(thetas[i,1])
mu.new <- rmu(tau.new)
thetas[i+1,] <- c(mu.new,tau.new)
}
}
thetas <- thetas[(burn+1):N,]
mu.est <- mean(thetas[,1])
tau.est <- mean(thetas[,2])
sigma.est <- sqrt(1/tau.est)
list(theta.dist=thetas,mu.est=mu.est,tau.est=tau.est,sigma.est=sigma.est)
}
mu.tau.gibbs(10000,xs)
mu.tau.gibbs(10000,xs)$theta.dist
plot(mu.tau.gibbs(10000,xs)$theta.dist)
plot(res$theta.dist[1000:1200,])
res <- mu.tau.gibbs(10000,x)
plot(res$theta.dist[1000:1200,])
x <- rnorm(200,mean=5,sd=2)
res <- mu.tau.gibbs(10000,x)
res$mu.est
res$tau.est
plot(res$theta.dist[1000:1200,])
plot(res$theta.dist[1000:1200,])
plot(res$theta.dist[1000:2000,])
plot(res$theta.dist[3000:4000,])
plot(res$theta.dist[5000:6000,])
plot(res$theta.dist[6000:6500,])
res
res[3]
1/res[3]
1./res[3]
sigma <- res$sigma.est
sigma
res$sigma.est
res[3]
res[4]
sigma <- res[4]
sigma
sigma
class(sigma)
sigma[1]
sigma[2]
sigma[1][1]
sigma[1][1][1]
as.numeric(sigma[1])
?dgamma
x <- read.table("coal.txt",header=T)[,2]
N <- length(x)
t <- function(theta) { sum(x[1:theta]) }
rlambda1 <- function(n,theta) { rgamma(n,t(theta)+1,theta+1) }
rlambda2 <- function(n,theta) { rgamma(n,t(N)-t(theta)+1,N-theta+1) }
ktheta <- Vectorize(function(theta,lambda1,lambda2)
{
(lambda1/lambda2)^t(theta)*exp(theta*(lambda2-lambda1))
},"theta")
ptheta <- function(theta,lambda1,lambda2)
{
Z <- sum(ktheta(1:N,lambda1,lambda2))
ktheta(theta,lambda1,lambda2)/Z
}
rtheta = function(n,lambda1,lambda2)
{
sample(x=1:N,n,replace=T,prob=ptheta(1:N,lambda1,lambda2))
}
ptheta(1)
ptheta(1,3,2)
sum(ptheta(1:N,3,2)
)
sum(ptheta(1:N,3,2))
N
sum(ptheta(1:N,3,2))
ptheta(1:N,3,2)
rtheta(100,3,2)
rtheta(1000,4,4)
warnings()
?floor
# thse compute the standardized weights
w = function(x) {
out <- q(x)/g(x)
out/sum(out)
}
h <- function(x) { x^2 }
ry <- function(n)
{
ys <- numeric(n)
ws <- rexp(n=n,rate=1)
us <- runif(n)
for (i in 1:n) { ys[i] <- ifelse(us[i] < 0.5,-ws[i],ws[i]) }
ys
}
q <- function(x) { exp(x)/(exp(2*x)+1) }
g <- function(x) { exp(-abs(x)) }
n=100
m=500
ys=ry(m)
ys
ws=w(ys)
ws
xs <- sample(ys,n,replace=T,prob=ws)
xs
w(xs)
w(xs)
xs <- sample(ys,n,replace=T,prob=ws)
c(1,2,3)*c(1,2,3)
mean(c(1,2,3)*c(1,2,3))
ys <- ry(m)
ws <- w(ys)
ws
ws*ys
ys
ws*ys
ys
mean(ws*ys)
m <- n*floor(sqrt(n))
ys <- ry(m)
ws <- w(ys)
mean(w(xs)*h(xs))
ys
ys^2
rx.transform <- function(n)
{
us <- runif(n)
log(tan(pi/2*us))
}
x <- rx.transform(10000)
print(mean(x^2))
xss <- seq(0.01,10.0,by=.01))
xss <- seq(0.01,10.0,by=.01)
yss <- g(seq(0.01,10.0,by=.01))
max(yss)
yss <- g(seq(0.001,10.0,by=.001))
max(yss)
yss <- g(seq(0.0001,10.0,by=.0001))
max(yss)
sum(ws*ys)
rx.importance(1000)
ls
?sample
?matrix
rtheta.prior <- function(n)
{
samp <- matrix(nrow=n,ncol=3)
samp[,1] <- rgamma(n,shape=3,rate=1)
samp[,2] <- rgamma(n,shape=3,rate=1)
samp[,3] <- sample(n:(N-1),1,replace=T)
samp
}
gibbs <- function(n,burn=1000,prior=rtheta.prior)
{
t <- function(theta) { sum(x[1:theta]) }
rlambda1 <- function(theta) { rgamma(t(theta)+1,theta+1) }
rlambda2 <- function(theta) { rgamma(t(N)-t(theta)+1,N-theta+1) }
ktheta <- Vectorize(function(theta,lambda1,lambda2)
{
if (theta < 1 || theta >= N) { return(0) }
(lambda1/lambda2)^t(theta)*exp(theta*(lambda2-lambda1))
},"theta")
ptheta <- function(theta,lambda1,lambda2)
{
Z <- sum(ktheta(1:N,lambda1,lambda2))
ktheta(theta,lambda1,lambda2)/Z
}
rtheta = function(lambda1,lambda2)
{
sample(x=1:N,n,replace=T,prob=ptheta(1:N,lambda1,lambda2))
}
nn <- n+burn
thetas <- matrix(nrow=nn,ncol=3)
thetas[1,] <- prior(1)
print(thetas[1,])
#for (i in 1:(nn-1))
#{
#  theta.new <- rtheta(thetas[i,2],thetas[i,3])
#  lambda1.new <- rlambda1(theta.new)
#  lambda2.new <- rlambda2(theta.new)
#  thetas[i+1,] <- c(theta.new,lambda1.new,lambda2.new)
#}
#thetas <- thetas[(burn+1):nn,]
#theta.est <- mean(thetas[,1])
#lambda1.est <- mean(thetas[,2])
#lambda2.est <- mean(thetas[,3])
#list(theta.dist=thetas,
#     theta.est=theta.est,
#     lambda1.est=lambda1.est,
#     lambda2.est=lambda2.est)
}
gibbs(10)
x <- read.table("coal.txt",header=T)[,2]
N <- length(x)
x
N
class(x)
type(x)
x
numeric(10)
class(numeric(10))
ktheta <- Vectorize(function(theta)
{
if (theta < 1 || theta >= N) { return(0) }
(lambda1/lambda2)^t(theta)*exp(theta*(lambda2-lambda1))
})
lambda1 <- 2
lambda2 <- 3
N <- 112
ktheta(1)
ktheta(111)
ktheta(112)
ktheta(113)
ktheta(1:N)
sum(ktheta(1:N))
ktheta(1:N)
sum(ktheta(1:N))
sample(x=1:(N-1),n,replace=T,prob=ktheta(1:(N-1)))
sample(x=1:N,n,replace=T,prob=ktheta(1:N))
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/2)
sum(ktheta(1:N))
Z <- sum(ktheta(1:N))
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
ktheta(1:N)/Z
sum(ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z/10)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z/10000)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
lambda1
lambda1=3
lambda2=.925
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
ktheta(1:N)/Z
Z <- sum(ktheta(1:N))
Z
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
sample(x=1:N,n,replace=T,prob=ktheta(1:N)/Z)
prob=ktheta(1:N)/Z
prob
cumsum(prob)
install.packages("ISLR2")
?ISLR2
?islr2
remotes::install_github("rstudio/blogdown")
ls
load(.Rdata)
load(".Rdata")
blowdown::serve_site()
blogdown::serve_site()
ls
blogdown::serve_site()
blogdown::serve_site()
getwd()
?head
wireless.data <- read.csv("https://goo.gl/72BKSf", header = TRUE)
str(wireless.data)
library(mosaic)
rbinom(n = 1, size = 20, prob = 0.6)
rbinom(n = 10, size = 20, prob = 0.6)
sum(rbinom(n = 100, size = 20, prob = 0.6))/100
sum(rbinom(n = 1000, size = 20, prob = 0.6))/1000
sum(rbinom(n = 1000, size = 20, prob = 0.6))/1000
sum(rbinom(n = 10000, size = 20, prob = 0.6))/10000
(x <- rbinom(n = 50, size = 20, prob = 0.6))
histogram(x)
(x <- rbinom(n = 5000, size = 20, prob = 0.6))
histogram(x)
x <- rbinom(n = 100000, size = 20, prob = 0.6)
histogram(x)
H1000 <- rbinom(n = 1000, size = 40, prob = 0.357)
tally(H1000)
favstats(H1000)
H1000 <- rbinom(n = 1000, size = 40, prob = 0.357)
dbinom(x = 15, size = 40, prob = 0.357)
dbinom(x = 0:20, size = 40, prob = 0.357)
plot(dbinom(x = 0:20, size = 40, prob = 0.357))
xpnorm(q = 48, mean = 46.8, sd = 1.75)
xpbinom(.5,100,.95)
xpbinom(.5,10,.95)
xpbinom(.5,100)
xpbinom(.5,100,.5)
?xpbinom(.5,100,.5)
xpnorm( c(47, 49), mean = 46.8, sd = 1.75)
xpnorm(c(47, 49), mean = 46.8, sd = 1.75)
xpnorm(c(47, 49), mean = 46.8, sd = 1.75)
knitr::opts_chunk$set(echo = TRUE)
n = 40
p = .75
plotDist('binom',size=n, p=p)
plotDist('binom',size=n, prob=p)
dbinom(30,n,p)
?plotDist
?rnorm
ls()
rm(ls())
?rm
rm(list = ls())
data = read.table('CH01PR20.txt')
getwd()
setwd("classes/stat482_regression_analysis_fa2021/hw/hw5")
data = read.table('CH01PR20.txt')
getwd()
setwd("/home/spinoza/filetopia/gdrive/alex/college/grad_math_classes/
stat482_regression_analysis_fa2021/hw/hw5")
setwd("/home/spinoza/filetopia/gdrive/alex/college/grad_math_classes/stat482_regression_analysis_fa2021/hw/hw5")
data = read.table('CH01PR20.txt')
data = read.csv('CH01PR20.txt')
data = read.csv('CH03PR15.txt')
colnames(data) = c("conc","hours")
data = read.csv('CH03PR15.txt')
data
colnames(data) = c("conc","hours")
names(data) = c("conc","hours")
data = read.csv('CH03PR15.txt')
type(data)
typeof(data)
data = read.table('CH03PR15.txt')
typeof(data)
names(data) = c("conc","hours")
data
mod = lm(conc ~ hours, data=data)
mod
predict(mod,data.frame(hours=5),interval = "confidence")
plot(data$hours, function(x) { 2.575 - 0.324*x})
plot(data$hours, 2.575 - 0.324*data$hours})
plot(data$hours, 2.575 - 0.324*data$hours)
plot(data$hours, 2.575 - 0.324*data$hours, type="l")
plot(data)
plot(data$hours,data$conc)
lines(data$hours, 2.575 - 0.324*data$hours, type="l")
abline(data$hours, 2.575 - 0.324*data$hours, type="l")
plot(data$hours,data$conc)
abline(data$hours, 2.575 - 0.324*data$hours, type="l")
dots(data$hours, 2.575 - 0.324*data$hours, type="l")
plot(data$hours,data$conc)
dots(data$hours, 2.575 - 0.324*data$hours, type="l")
plot(data$hours,data$conc)
lines(data$hours, 2.575 - 0.324*data$hours, type="l")
lines(mod)
plot(data$hours,data$conc)
lines(mod)
lines(data$hours,mod$fitted.values)
plot(data$hours,data$conc)
lines(data$hours,mod$fitted.values)
plot(data$hours,mod$fitted.values)
plot(data$hours,data$conc)
lines(data$hours,mod$fitted.values)
plot(mod$residuals)
?predict.lm
predict(object=mod, newdata=data.frame(hours=5))
typeof(predict(object=mod, newdata=data.frame(hours=5)))
?plot.lm
?legend
data[data$hours==5]
data$hours==5
data$hours==5
data$hours==5
data
data$hours
data$hours[data$hours==5]
data$conc[data$hours==5]
fact.hours = as.factor(data$hours)
full.mod = lm(data$conc ~ fact.hours-1)
full.mod
full.mod = lm(data$conc ~ fact.hours)
full.mod
full.mod = lm(data$conc ~ fact.hours-1)
full.mod
plot(full.mod)
plot(full.mod$residuals)
plot(full.mod$effects)
plot(full.mod$contrasts)
plot(mod$fitted.values)
plot(data$hours,mod$fitted.values)
plot(data$hours,mod$fitted.values,type="l")
plot(data$hours,mod$fitted.values,type="l")
lines(data$hours,full.mod$fitted.values,type="l")
lines(data$hours,full.mod$fitted.values)
data
plot(data$hours,data$conc)
summary(full.mod)
anova(full.mod)
anova(reg.mod,full.mod)
reg.mod = lm(conc ~ hours, data=data)
anova(reg.mod,full.mod)
data$fact.hours = as.factor(data$hours)
full.mod = lm(conc ~ fact.hours - 1, data=data)
anova(reg.mod,full.mod)
