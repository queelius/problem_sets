?nrows
?nrow
?tr
?t
?inv
library(matlib)
library(matlib)
install.packages("matlib")
install.packages("rgl")
install.packages("matlib", dependencies=T,INSTALL_opts='--no-lock')
library(matlib)
?inv
hard.data
hard.data = read.csv("./exam1-1.csv")
head(hard.data)
#b0 = hard.mod$coefficients[1]
#b1 = hard.mod$coefficients[2]
#residual = hard.mod$residuals
y = matrix(hard.data$hardness,ncol=1)
n = nrow(y)
x = hard.data$time
X = matrix(c(1:n,x),ncol=2)
X
X = matrix(c(rep(1,n),x),ncol=2)
X
x
rep(1,3)
c(rep(1,3),rep(2,3))
matrix(c(rep(1,3),rep(2,3)),ncol=2)
matrix(rep(1,3),rep(2,3))
?matrix
X = matrix(c(rep(1,n),x),ncol=2)
X
t(X)
t(X)%*%X
(t(X)%*%X)^(-1)
inv(t(X)%*%X)
inv(t(X)%*%X)*(t(X)%*%X)
(t(X)%*%X)^(-1)*(t(X)%*%X)
Inverse(t(X)%*%X)*(t(X)%*%X)
?inv
inv(t(X)%*%X)*(t(X)%*%X)
inv(t(X)%*%X,tol=.0001)*(t(X)%*%X)
#b0 = hard.mod$coefficients[1]
#b1 = hard.mod$coefficients[2]
#residual = hard.mod$residuals
y = matrix(hard.data$hardness,ncol=1)
n = nrow(y)
x = hard.data$time
X = matrix(c(rep(1,n),x),ncol=2)
b = (t(X)%*%X)^(-1)*t(X)*y
X
y
X*y
b = (t(X)%*%X)^(-1)*t(X)%*%y
X%*%y
y
X%*%hard.data$hardness
y
yy=hard.data$hardness
yy
X%*%y
X%*%yy
t(X)%*%y
T2=t(X)%*%y
T1=(t(X)%*%X)^(-1)
T1
T1%*%T2
b = (t(X)%*%X)^(-1)%*%t(X)%*%y
b
hard.mod = lm(hardness ~ time, data=hard.data)
confint(hard.mod)
X
y
x
hard.data
X
y
#x.bar = mean(x)
#ssx = sum((x-x.bar)^2)
b = (t(X)%*%X)^(-1)%*%t(X)%*%Y
#b0 = hard.mod$coefficients[1]
#b1 = hard.mod$coefficients[2]
#residual = hard.mod$residuals
y = hard.data$hardness
Y = matrix(y,ncol=1)
n = length(y)
x = hard.data$time
X = matrix(c(rep(1,n),x),ncol=2)
#x.bar = mean(x)
#ssx = sum((x-x.bar)^2)
b = (t(X)%*%X)^(-1)%*%t(X)%*%Y
print(b)
X*b
X%*%b
X%*%b-Y
#x.bar = mean(x)
#ssx = sum((x-x.bar)^2)
b = inv(t(X)%*%X)%*%t(X)%*%Y
b
X%*%b-Y
b0 = b[1]
b0
b1 = b[2]
b1
hard.data
anova(hard.mod)
levels(x)
x
level(x)
class(x)
as.factor(x)
levels(as.factor(x))
anova(hard.reg,hard.mod)
hard.data$fact.time = as.factor(hard.data$time)
hard.full = lm(hardness ~ fact.time - 1, data=hard.data)
anova(hard.reg,hard.full)
hard.data = read.csv("./exam1-1.csv")
hard.reg = lm(hardness ~ time, data=hard.data)
confint(hard.reg)
anova(hard.reg,hard.full)
plot(hard.data$fact.time,
hard.full$fitted.values,
type = "b",
ylab = "hardness",
xlab = "elapsed time",
ylim = c(min(hard.data$hardness),max(hard.data$hardness)))
hard.data$fact.time
hard.data$fact.time = as.factor(hard.data$time)
hard.data$fact.time
levels(hard.data$fact.time)
plot(hard.data$fact.time,
hard.full$fitted.values,
type = "b",
ylab = "hardness",
xlab = "elapsed time",
ylim = c(min(hard.data$hardness),max(hard.data$hardness)))
abline(hard.reg$coefficients,col="red")
points(hard.data$fact.time,hard.data$hardness,pch=16)
plot(hard.data$fact.time,
hard.full$fitted.values,
type = "b",
ylab = "hardness",
xlab = "elapsed time",
ylim = c(min(hard.data$hardness),max(hard.data$hardness)))
abline(hard.reg$coefficients,col="red")
points(hard.data$fact.time,hard.data$hardness,pch=16)
hard.reg$coefficients
165.8+2.1*c(16,24,32,40)
plot(165.8+2.1*c(16,24,32,40))
abline(hard.reg$coefficients,col="red")
abline(coef(hard.reg),col="red")
as.float(2)
as.double(2)
class(as.double(2))
class(as.integer(2))
hard$data
hard.data
hard.data$time
class(hard.data$time)
hard.data = read.csv("./exam1-1.csv")
hard.data$time = as.double(hard.data$time)
hard.reg = lm(hardness ~ time, data=hard.data)
confint(hard.reg)
#abline(hard.reg$coefficients,col="red")
abline(hard.reg)
?seq
seq(16,40,.1)
plot(f, seq(16,40,.1))
#abline(hard.reg$coefficients,col="red")
f = function(t) { 165.8 + 2.1*t }
plot(f, seq(16,40,.1))
points(hard.data$fact.time,hard.data$hardness,pch=16)
plot(x=seq(16,40,.1),y=f(seq(16,40,.1)),col="red")
points(hard.data$fact.time,hard.data$hardness,col="blue",pch=16)
hard.data$fact.time
hard
hard.data
hard.data$fact.time = as.factor(hard.data$time)
hard.data
hard.data$fact.time = as.factor(hard.data$time)
hard.full = lm(hardness ~ fact.time - 1, data=hard.data)
anova(hard.reg,hard.full)
plot(x=seq(16,40,.1),y=f(seq(16,40,.1)),col="red")
points(hard.data$fact.time,hard.data$hardness,col="blue",pch=16)
library(leaps)
dat2 = read.csv("./exam1-2.csv")
dat2
head(dat2)
full.mod = regsubsets(oxy ~ ., data=dat2)
full.mod
sel = summary(full.mod)
sel
sel$cp
plot(sel$cp)
plot(sel$cp,xlab="#(variables)",ylab="Cp",type="l")
star = which.min(sel$cp)
star
sel$cp[star]
points(star,sel$cp[star],col="red",pch=20,cex=2)
star = which.min(sel$cp)
points(star,sel$cp[star],col="red",pch=20,cex=2)
plot(full.mod,scale="Cp")
coef(full.mod)
coef(full.mod,star)
?plot
m = full.mod = lm(y ~ x1+x2+x3+x5+x6, data=dat2)
dat2 = read.csv("./exam1-2.csv")
colnames(dat2) = c("x1","x2","x3","x4","x5","x6","y")
head(dat2)
full.mod = regsubsets(y ~ ., data=dat2)
sel = summary(full.mod)
plot(sel$cp,xlab="#(variables)",ylab="Cp",type="l",main= "Cp vs dimension")
star = which.min(sel$cp)
points(star,sel$cp[star],col="red",pch=20,cex=2)
plot(full.mod,scale="Cp")
m = full.mod = lm(y ~ x1+x2+x3+x5+x6, data=dat2)
m
library("readxl")
data = read_excel("exam1data.xlsx")
ego
fitness = as.factor(na.omit(data$fitness.level))
ego = na.omit(data$ego.score)
ego
fitness
data
length(ego[fitness=='high'])
length(ego[fitness=='low'])
boxplot(ego~fitness)
dosage = as.factor(na.omit(data$dose.level))  # factor A
activity = na.omit(data$activity.score)       # response
boxplot(activity ~ dosage)
model = aov(activity ~ dosage)
summary(model)
library(multcomp)
# set up all-pair comparisons for factor `dosage`
comps = glht(model,linfct=mcp(dosage="Tukey"))
ci.lsd = confint(comps,calpha=univariate_calpha())
plot(ci.lsd)
ci.lsd
summary(comps,test=univariate())
csd(comps)
cls(comps)
cld(comps)
cld(summary(comps))
cld(comps)
cld(summary(comps,test=univariate()))
