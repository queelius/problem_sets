plot(cld(summary(compare.T,test=univariate())))
confint(compare.T,calpha=univariate_calpha())
#We begin by calling the data for handout 7
library("readxl")
h7.data = read_excel("handout7data.xlsx")
?t.test
?Pair
Pair(c(1,2,3),c(10,20,30))
#We will need these packages to work with blocks as random effects
library("lme4")
library("lmerTest")
#We will need this package for performing Fisher comparisons and groupings
library("multcomp")
#We will need these packages to work with blocks as random effects
library("lme4")
library("lmerTest")
#We will need this package for performing Fisher comparisons and groupings
library("multcomp")
#Example 7.1
#An experiment is conducted to compare two tips used on a hardness testing machine
#The experimental units are the metal specimens. Each tip gives a hardness measurement for each specimen.
#Thus, the data is from a paired comparisons design
tip1 = na.omit(h7.data$tip1)
tip2 = na.omit(h7.data$tip2)
tip1
tip2
#The built-in function t.test can be used to compute a paired comparisons analysis.
t.test(tip1,tip2,paired = TRUE)
#The built-in function t.test can be used to compute a paired comparisons analysis.
t.test(tip1,tip2,paired = TRUE)
library("readxl")
data = read_excel("handout7data.xlsx")
A = as.factor(na.omit(data$o))
B = as.factor(na.omit(data$fuse))
y = na.omit(data$time)
A
B
A1 = A[B==1]
B
B = B[A==1]
A
A = as.factor(na.omit(data$o))
B = as.factor(na.omit(data$fuse))
y = na.omit(data$time)
B1 = B[A==1]
B2 = B[A==2]
B1
B2
B
t = data$t
s = data$s
h = data&h
# use contrasts to define parameter restrictions for the fixed effect in the model
contrasts(t)=contr.sum
h = data$h
# use contrasts to define parameter restrictions for the fixed effect in the model
contrasts(t)=contr.sum
t = as.factor(data$t)
s = as.factor(data$s)
h = data$h
# use contrasts to define parameter restrictions for the fixed effect in the model
contrasts(t)=contr.sum
random.mod = lmer(h ~ (1|s) + t)
#The anova command is used to compute the test for fixed effects.
anova(random.mod)
random.mod
summary(random.mod)
# the 1 in front of s signifies that batch levels are randomly selected from a
# common distribution.
random.mod = lmer(h ~ (1|s) + t)
anova(random.mod)
coeff(random.mod)
coef(random.mod)
tip = as.factor(data$tip) # tip level factor : fixed effect
spec = as.factor(data$specimen) # metal specimen : random effect
hard = data$hardness
# fixed effect tau1 + tau2 = 0 (for tip1 and tip2)
contrasts(tip)=contr.sum
# the 1 in front of s signifies that batch levels are randomly selected from a
# common distribution.
random.mod = lmer(hard ~ (1|spec) + tip)
#The anova command is used to compute the test for fixed effects.
anova(random.mod)
round(.00087,digits=3)
anova(random.mod)
random.mod
coef(random.mod)
anova(random.mod)
summary(random.mod)
summary(random.mod)$`Random effects`
x=summary(random.mod)
x$methTitle
x$devcomp
x$sigma
x$vcov
x$ngrps
x$family
x$logLik
x$coefficients
x$varcor
x$varcor^2
sss=x$varcor
sss$spec
sss^2
sss$spec^2
sss$spec
sss$spec$`Intercept`
x$varcor
x$AICtab
x$objClass
coef(x)
cov(x)
vcov(x)
sigma(x)
var(x)
x$isLmer
x$devcomp
summary(random.mod)
# since the fixed effect estimates must sum to 0, the estimate at level a=4 is
# the negative of the sum of the fixed effect estimates at levels 1 through a-1.
estimates = summary(random.mod)
estimates.tau.hat = c(estimates$coefficients[1:4,1],0-sum(estimates$coefficients[2:4,1]))
estimates.tau.hat
1:4
as.string(1:4)
as.str(1:4)
toString(1:4)
names(estimates.tau.hat) = "tau" + c("1","2","3","4")
"tau" + c("1","2","3","4")
c("1","2","3","4")
concat("a",c("1","2","3","4"))
cat("a",c("1","2","3","4"))
paste("a",c("1","2","3","4"))
names(estimates.tau.hat) = paste("tau",c("1","2","3","4"))
estimates.tau.hat
estimates.tau.hat = c(estimates$coefficients[2:4,1],0-sum(estimates$coefficients[2:4,1]))
names(estimates.tau.hat) = paste("tau",c("1","2","3","4"))
estimates.tau.hat
estimates.tau.hat = c(estimates$coefficients[1:4,1],0-sum(estimates$coefficients[2:4,1]))
names(estimates.tau.hat) = c("mu","tau1","tau2","tau3","tau4")
estimates.tau.hat
?t
?qt
qt(.025,9)
qt(1-.025,9)
random.mod
.25793^2
?random.mod
random.mod
xxxx=random.mod
coef(random.mod)
vcov.merMod(random.mod)
estimates.tau.hat
summary(random.mod)$`Random effects`
anova(random.mod)
random.mod = lmer(h ~ (1|s) + t)
?lmer
sigma(random.mod)
# the 1 in front of s signifies that batch levels are randomly selected from a
# common distribution.
random.mod = lmer(hard ~ (1|spec) + tip)
sigma(random.mod)
tip = as.factor(data$tip) # tip level factor : fixed effect
spec = as.factor(data$specimen) # metal specimen : random effect
hard = data$hardness
# fixed effect tau1 + tau2 = 0 (for tip1 and tip2)
contrasts(tip)=contr.sum
# the 1 in front of s signifies that batch levels are randomly selected from a
# common distribution.
random.mod = lmer(hard ~ (1|spec) + tip)
#The anova command is used to compute the test for fixed effects.
anova(random.mod)
random.mod
summary(random.mod)
summ=summary(random.mod)
summ$devcomp
summ$sigma
summ$residuals
summ$coefficients
summ$varcor
summ$varcor$spec
.257930^2
.094281^2
varcor(summ)
varcor(summ)
.094281^2
(.0089)^2
(.094281)^2
(.094)^2
.257^2
.258^2
aov(y~A+B)
anova(aov(y~A+B))
?interaction.plot
interaction.plot(A,B,y)
interaction.plot(B,A,y)
curwd()
data = read_excel("handout8data.xlsx")
library("readxl")
data = read_excel("handout8data.xlsx")
# we will need these packages to work with blocks as random effects
library("lme4")
library("lmerTest")
A = as.factor(na.omit(data$device))
B = as.factor(na.omit(data$specimen))
y = na.omit(data$time)
y = na.omit(data$hardness)
# remember that we are testing whether operator differences are
# generalizable to a larger population of parts.
interaction.plot(B,A,y)
# use contrasts to define parameter restrictions for the fixed effect in the
# model
contrasts(A)=contr.sum
# to fit a model with both fixed effects and random effects, we use lmer
# (linear mixed effects in R).
# the code below defines operator as a fixed effect, part as a random effect
# selected from a distribution, and operator*part interaction as an effect from
# its own distribution
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
mixed.mod
isSingular(mixed.mod)
A
levels(A)
str(A)
?isSingular
# use contrasts to define parameter restrictions for the fixed effect in the
# model
contrasts(A)=contr.sum
# to fit a model with both fixed effects and random effects, we use lmer
# (linear mixed effects in R).
# the code below defines operator as a fixed effect, part as a random effect
# selected from a distribution, and operator*part interaction as an effect from
# its own distribution
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
# we will need these packages to work with blocks as random effects
library("lme4")
library("lmerTest")
# use contrasts to define parameter restrictions for the fixed effect in the
# model
contrasts(B)=contr.sum
# to fit a model with both fixed effects and random effects, we use lmer
# (linear mixed effects in R).
# the code below defines operator as a fixed effect, part as a random effect
# selected from a distribution, and operator*part interaction as an effect from
# its own distribution
mixed.mod = lmer(y ~ B + (1|A) + (1|B:A))
# the following code is used for computing the variance components estimates,
# and fixed effect parameter estimates.
# because the interaction effect is small, the estimate for the interaction
# variance is near zero, difficulties with the computing algorithm.
summary(mixed.mod)
#We begin by calling the data for handout 8
library("readxl")
h8.data = read_excel("handout8data.xlsx")
#We will need these packages to work with blocks as random effects
library("lme4")
library("lmerTest")
operator = as.factor(na.omit(h8.data$operator))
part = as.factor(na.omit(h8.data$part))
m = na.omit(h8.data$measurement)
#Graph the data.
#Remember that we are testing whether operator differences are generalizable to a larger population of parts.
interaction.plot(part,operator,m)
#Use contrasts to define parameter restrictions for the fixed effect in the model
contrasts(operator)=contr.sum
#To fit a model with both fixed effects and random effects, we use lmer (linear mixed effects in R).
#The code below defines operator as a fixed effect, part as a random effect selected from a distribution,
#and operator*part interaction as an effect from its own distribution
mixed.mod = lmer(m ~ operator + (1|part) + (1|operator:part))
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
#The following code is used for computing the variance components estimates, and fixed effect parameter estimates.
#Because the interaction effect is small, the estimate for the interaction variance is near zero,
#difficulties with the computing algorithm.
summary(mixed.mod)
mixed.test = function(A,B,y)
{
av=anova(lm(y~A*B))
F.a = av$`Mean Sq`[1]/av$`Mean Sq`[3]
p.value = pf(F.a,df1=av$Df[1],df2=av$Df[3],lower.tail = FALSE)
table1 = matrix(c(av$`Sum Sq`[1],av$`Sum Sq`[2],av$`Sum Sq`[3],av$`Sum Sq`[4],
av$Df[1],av$Df[2],av$Df[3],av$Df[4],
av$`Mean Sq`[1],av$`Mean Sq`[2],av$`Mean Sq`[3],av$`Mean Sq`[4]),nrow = 4)
dimnames(table1) = list(c("Fixed Effect A","Random Effect B","Interaction AB","Error"),
c("SS","df","MS"))
print(table1)
table2 = matrix(c(F.a,p.value),nrow = 1)
dimnames(table2) = list(c(""),c("F-test for fixed effect","p-value"))
print(table2)
a=nlevels(A)
b=nlevels(B)
n=length(y) / a / b
var.hat = av$`Mean Sq`[4]
var.interaction.hat = (av$`Mean Sq`[3]-av$`Mean Sq`[4])/n
var.block = (av$`Mean Sq`[2]-av$`Mean Sq`[3])/n/a
table3 = matrix(c(var.hat,var.interaction.hat,var.block),nrow=1)
dimnames(table3) = list(c(""),c("error.var","interaction.var","block.var"))
print(table3)
}
#Below is the call to perform a test for the factor A effect using the function mixed.test.
#Factor A is the fixed factor (entered first), factor B is the random factor (entered next), in the call.
mixed.test(operator,part,m)
.99/2
1.3/.99
1.308333/.9916667
1.308333/.711
#The following code is used for computing the variance components estimates, and fixed effect parameter estimates.
#Because the interaction effect is small, the estimate for the interaction variance is near zero,
#difficulties with the computing algorithm.
summary(mixed.mod)
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
library("lme4")
library("lmerTest")
contrasts(operator)=contr.sum
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
anova(mixed.mod)
?lmer
?lmerTest
?lmer
?lmer
mixed.mod
summary(mixed.mod)
xxx=summary(mixed.mod)
coef(xxx)
#To fit a model with both fixed effects and random effects, we use lmer (linear mixed effects in R).
#The code below defines operator as a fixed effect, part as a random effect selected from a distribution,
#and operator*part interaction as an effect from its own distribution
mixed.mod = lmer(m ~ operator + (1|part) + (1|operator:part))
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
#The following code is used for computing the variance components estimates, and fixed effect parameter estimates.
#Because the interaction effect is small, the estimate for the interaction variance is near zero,
#difficulties with the computing algorithm.
summary(mixed.mod)
str(h8.data)
mixed.mod = lmer(m ~ operator + (1|part))
mixed.mod
anova(mixed.mod)
pf(5, 3, 14, lower.tail = FALSE)
?pf(5, 3, 14, lower.tail = FALSE)
pf(.692, 3, 14, lower.tail = FALSE)
pf(.692, 1, 9, lower.tail = FALSE)
pf(.692, 1, 9)
#We begin by calling the data for handout 8
library("readxl")
h8.data = read_excel("handout8data.xlsx")
operator = as.factor(na.omit(h8.data$operator))
part = as.factor(na.omit(h8.data$part))
m = na.omit(h8.data$measurement)
m
length(m)
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
h8.data = read_excel("handout8data.xlsx")
#We will need these packages to work with blocks as random effects
library("lme4")
operator = as.factor(na.omit(h8.data$operator))
part = as.factor(na.omit(h8.data$part))
m = na.omit(h8.data$measurement)
#Use contrasts to define parameter restrictions for the fixed effect in the model
contrasts(operator)=contr.sum
#To fit a model with both fixed effects and random effects, we use lmer (linear mixed effects in R).
#The code below defines operator as a fixed effect, part as a random effect selected from a distribution,
#and operator*part interaction as an effect from its own distribution
mixed.mod = lmer(m ~ operator + (1|part) + (1|operator:part))
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
anova.mod = lmer(m ~ operator + (1|part))
summary(anova.mod)
anova.mod = lmer(m ~ operator + part)
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
anova.mod = lm(m ~ operator + part)
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
levels(operator)
levels(part)
data = read_excel("handout8data.xlsx")
y = na.omit(data$hardness)
length(y)
data = read_excel("handout8data.xlsx")
A = as.factor(na.omit(data$device))
B = as.factor(na.omit(data$specimen))
y = na.omit(data$hardness)
a = length(levels(A))
b = length(levels(B))
N = length(y)
n = N / (a * b)
df.A = a-1
df.B = b-1
df.AB = (a-1)*(b-1)
c(a,b,n,N,df.A,df.B,df.AB)
c("a"=a,b,n,N,df.A,df.B,df.AB)
c("a"=a,"b"=b,"n"=n,"N"=N,"df.A"=df.A,"df.B"=df.B,"df.AB"=df.AB)
av = anova(lm(y~A*B))
F.A = av$`Mean Sq`[1]/av$`Mean Sq`[3]
ms.A = av$`Mean Sq`[1]
ms.AB = av$`Mean Sq`[3]
df1 = av$Df[1]
df2 = av$Df[3]
c(F.a,df1,df2,msa,msab)
c(F.A,df1,df2,ms.A,ms.AB)
c("a"=a,"b"=b,"n"=n,"N"=N,"df.A"=df.A,"df.B"=df.B,"df.AB"=df.AB)
c(F.A,df1,df2,ms.A,ms.AB)
av = anova(lm(y~A*B))
F.A = av$`Mean Sq`[1]/av$`Mean Sq`[3]
ms.A = av$`Mean Sq`[1]
ms.AB = av$`Mean Sq`[3]
df.A = av$Df[1]
df.AB = av$Df[3]
c(F.A,df1,df2,ms.A,ms.AB)
c("F.A"=F.A,"df.A"=df.A,"df.AB"=df.AB,"ms.A"=ms.A,"ms.AB"=ms.AB)
av = anova(lm(y~A*B))
ms.A = av$`Mean Sq`[1]
ms.AB = av$`Mean Sq`[3]
F.A = ms.A/ms.B
df.A = av$Df[1]
df.AB = av$Df[3]
c("F.A"=F.A,"df.A"=df.A,"df.AB"=df.AB,"ms.A"=ms.A,"ms.AB"=ms.AB)
F.A = ms.A/ms.AB
df.AB = av$Df[3]
c("F.A"=F.A,"df.A"=df.A,"df.AB"=df.AB,"ms.A"=ms.A,"ms.AB"=ms.AB)
pf(.692,df.A,df.AB)
pf(.692,df.A,df.AB,lower.tail=T)
pf(.692,df.A,df.AB,lower.tail=F)
lm <- lm(y~A)
tmt <- lm(y~A)
tmt
lm
View(tmt)
View(tmt)
View(tmt)
View(tmt)
View(tmt)
test1 <- lm(y~A)
test1$sigma
summary(test1)
summary(test1)$sigma
summary(test1)$sigma^2
?lme
pf(.312,df.A,df.E,lower.tail=F)
pf(.312,df.A,df.E,lower.tail=F)
df.E=a*b*(n-1)
df.E
pf(.312,df.A,df.E,lower.tail=F)
df.A
library("lme4")
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
anova(mixed.mod)
operator = as.factor(na.omit(h8.data$operator))
part = as.factor(na.omit(h8.data$part))
m = na.omit(h8.data$measurement)
#Use contrasts to define parameter restrictions for the fixed effect in the model
contrasts(operator)=contr.sum
#To fit a model with both fixed effects and random effects, we use lmer (linear mixed effects in R).
#The code below defines operator as a fixed effect, part as a random effect selected from a distribution,
#and operator*part interaction as an effect from its own distribution
mixed.mod = lmer(m ~ operator + (1|part) + (1|operator:part))
anova.mod = lm(m ~ operator + part)
#The anova command is used to compute the test for fixed effects.
#The test here is not quite the same as what we developed in lecture.
anova(mixed.mod)
contrasts(A)=contr.sum
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
anova(mixed.mod)
data = read_excel("handout8data.xlsx")
A = as.factor(na.omit(data$device))
B = as.factor(na.omit(data$specimen))
y = na.omit(data$hardness)
library("lme4")
contrasts(A)=contr.sum
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
anova(mixed.mod)
library("lme4")
contrasts(A)=contr.sum
mixed.mod = lmer(y ~ A + (1|B) + (1|A:B))
anova(mixed.mod)
## Type III Analysis of Variance Table with Satterthwaite's method
##     Sum Sq  Mean Sq NumDF DenDF F value Pr(>F)
## A   0.41667 0.41667     1    49  0.3121 0.5789
#Below we run a randomized block design with the sample means as the response variables.
#Note that the test for a fixed factor effect is equivalent to that from the mixed.test function.
rcbd.mod = lmer(y ~ A + (1|B))
anova(mixed.mod)
#Below we run a randomized block design with the sample means as the response variables.
#Note that the test for a fixed factor effect is equivalent to that from the mixed.test function.
rcbd.mod = lmer(h.means ~ d + (1|s))
# the variables below represent the same data, only with repeat measurements summarized by their sample mean.
d = as.factor(na.omit(data$d))
s = as.factor(na.omit(data$s))
h.means = na.omit(data$h)
#Below we run a randomized block design with the sample means as the response variables.
#Note that the test for a fixed factor effect is equivalent to that from the mixed.test function.
rcbd.mod = lmer(h.means ~ d + (1|s))
anova(rcbd.mod)
A = as.factor(na.omit(data$device))
B = as.factor(na.omit(data$specimen))
y = na.omit(data$hardness)
contrasts(A)=contr.sum
aov.mod(y~A*B)
aov.mod = aov(y~A*B)
anova(aov.mod)
aov.mod = aov(y~A+B)
anova(aov.mod)
