?round
?table
?data.frame
library(printr)
m <- matrix(c(7,7,2,3,2,8,3,7,1,5,4,9,2,8,9,14),nrow=4,ncol=4)
colnames(m) <- c("never/occassionally", "fairly often", "very often", "almost always")
rownames(m) <- colnames(m)
t <- data.frame(c(7,7,2,3),c(2,8,3,7),c(1,5,4,9),c(2,8,9,14))
colnames(t) <- c("never/occassionally", "fairly often", "very often", "almost always")
rownames(t) <- colnames(t)
t
m
t
str(t)
head(t)
tt = t
tt
View(t)
prop.table(t)
?kable
factor(c("yes","no"))
factor(c("yes","no","yes"))
factor(c("yes","no","yes","NO"))
factor(c("yes","no","yes",lower("NO"))
factor(c("yes","no","yes",lower("NO"))
factor(c("yes","no","yes",lower("NO"))
a
lower("A")
str.lower("A")
str.tolower("A")
tolower("A")
factor(c("yes","no","yes",tolower("NO"))
a
factor(c("yes","no","yes",tolower("NO")))
factor(c("yes","no","yes",tolower("NO"),NA))
NA
class(NA)
class(A)
class(NA)
NaN
class(NaN)
Na
source("vector(1.,2.,3.)")
dump("test",vector(1.,2.,3.))
dump("test",vector(1.,2.,3.))
vector(1.,2.,3.)
vector(1,2,3)
vector(length=3,1,2,3)
vector(length=3)
vector(1,2,3,length=3)
c(1,2,3)
class(c(1,2,3))
class(c(1,2,3))
class(vector(length=3))
class(vector(length=3))
dump(c(1,2,3))
dump("test",c(1,2,3))
dump(file="test",c(1,2,3))
dump(file="test","c(1,2,3)")
serialize(c(1,2,3))
?serialize
serialize(c(1,2,3),NULL)
deserialize(serialize(c(1,2,3),NULL))
?deserialize
unserialize(serialize(c(1,2,3),NULL))
class(unserialize(serialize(c(1,2,3),NULL)))
plot(c(1,2,3),c(1,4,9))
plot(c(1,2,3,4,5,6),c(1,4,9,16,25,36))
?dput
dput(c(1,2,3),NULL))
dput(c(1,2,3))
dget(dput(c(1,2,3)))
?read.table
getwd()
c(1:5,"6,7","8,9,10")
test1<-c(1:5,"6,7","8,9,10")
tf <- tempfile()
writeLines(test1,tf)
system("ls")
system("cat /tmp/RtmpjwAuin/filedc")
tf
str(tf)
str(tf)[4,]
str(tf)[3]
str(tf)[1]
str(tf)[0]
chr
tf
filename(tf)
str(tf)
s <- str(tf)
s
s <- str(tf)[2]
s
s <- str(tf)[3]
s
writeLines(test1,tf)
read.csv(tf,fill=TRUE)
c(1:1000,(function(x) x^2)(1:1000))
plot(c(1:1000,(function(x) x^2)(1:1000)))
plot(c(1:1000,(function(x) x^3)(1:1000)))
plot(c(1:1000,(function(x) exp(x))(1:1000)))
exp(1:1000)
plot(1:1000,exp(1:1000))
plot(1:100,exp(1:100))
plot(1:10,exp(1:10))
plot(1:5,exp(1:5))
plot(1:5,sin(exp(1:5)))
plot(1:5000,sin(exp(1:5000)))
plot(1:500,sin(exp(1:500)))
plot(1:50,sin(exp(1:50)))
plot(1:10,sin(exp(1:10)))
plot(1:10,sin(1:10))
plot(1:1000,sin(1:1000))
sin(1:1000)
plot(1:10,sin(1:10))
plot(0:10,sin(0:10))
plot(0:100,sin(0:100))
sin(1:10)
sin(1:10)
sin((1:1000)/100)
plot(sin((1:1000)/100))
plot((1:1000)/100,sin((1:1000)/100))
plot((1:1000)/100,sin((exp(1:1000)/100)))
plot((1:1000)/100,sin((exp((1:1000)/100))))
plot((1:1000)/1000,sin((exp((1:1000)/1000))))
plot((1:10000)/1000,sin((exp((1:10000)/1000))))
plot((1:10000)/1000,sin((ln((1:10000)/1000))))
plot((1:10000)/1000,sin((sqrt((1:10000)/1000))))
plot((1:10000)/1000,((((1:10000)/1000)))^2)
View(m)
plot((1:10000)/1000,sin((sqrt((1:10000)/1000))))
install.packages("tidyverse", dependencies = TRUE)
```{r}
obs = matrix(c(7,7,2,3,2,8,3,7,1,5,4,9,2,8,9,14), nrow=4, byrow=TRUE)
gamma_estimator <- function(csdata)
{
# to compute the estimate of gamma and the standard error, we need MESS
library("MESS")
# gkgamma takes an IxJ matrix as an input
gk.result = gkgamma(csdata)
# compute gamma.hat and its standard error
gamma.hat = gk.result$estimate
se = gk.result$se1
# compute the z statistic and p-value for testing gamma=0 (independence)
z = gamma.hat / se
p.value.g = 2*pnorm(abs(z),lower.tail = FALSE)
# display the results
g.table = matrix(c(gamma.hat,se,z,p.value.g),byrow=TRUE,nrow = 1)
dimnames(g.table) = list(c("gamma"),c("estimate","ASE","z.stat","p.value"))
g.table
}
gamma_estimator <- function(csdata)
{
# to compute the estimate of gamma and the standard error, we need MESS
library("MESS")
# gkgamma takes an IxJ matrix as an input
gk.result = gkgamma(csdata)
# compute gamma.hat and its standard error
gamma.hat = gk.result$estimate
se = gk.result$se1
# compute the z statistic and p-value for testing gamma=0 (independence)
z = gamma.hat / se
p.value.g = 2*pnorm(abs(z),lower.tail = FALSE)
# display the results
g.table = matrix(c(gamma.hat,se,z,p.value.g),byrow=TRUE,nrow = 1)
dimnames(g.table) = list(c("gamma"),c("estimate","ASE","z.stat","p.value"))
g.table
}
gamma_result <- gamma_estimator(obs)
gamma_result
