#enter the data for the cancer remission example as a data.frame
cancer.data = data.frame(li = c(8,10,12,14,16,18,20,22,24,26,28,32,34,38),
num = c(2,2,3,3,3,1,3,2,1,1,1,1,1,3),
rem = c(0,0,0,0,0,1,2,1,0,1,1,0,1,2))
print(cancer.data)
#use glm to perform to the model fit computations
cancer.mod = glm(rem/num ~ li,weights=num,family = binomial,data=cancer.data)
summary(cancer.mod)
?glm
cancer
cancer.mod
cancer.mod$coefficients
#compute an estimate of the odds ratio
theta = exp(b)
#define the intercept and slope parameter estimates
a = cancer.mod$coefficients[1]
b = cancer.mod$coefficients[2]
#compute an estimate of the odds ratio
theta = exp(b)
print(theta)
#estimate the probability of remission for a patient with LI = 20
x=20
L = a + b*x
L
L = num(a + b*x)
L = a + b*x + 0.0
L
class(L)
names(L)
names(L) = "value"
L
L = a + b*x
L
pi.hat = exp(L) / (1+exp(L))
pi.hat
#we can also use the built in R functions for computing an estimate of the linear component
#and an estimate of the probability for a patient with LI = 20
predict(cancer.mod,newdata=data.frame(li=20))
predict(cancer.mod,newdata=data.frame(li=20),type = "response")
?Arima
library(forecast)
?Arima
?Arima
?rep(0, 3)
rep(0, 3)
rep(1, 3)
wais.data <- data.frame(
wais=c(4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),
n=c(2,1,2,3,2,6,6,6,2,6,7,3,4,1,1),
senile=c(1,1,1,2,2,2,2,1,0,1,2,0,0,0,0))
print(wais.data)
wais.mod = glm(senile/n ~ wais,weights=n, family=binomial, data=wais.data)
# define the intercept and slope parameter estimates
# alpha
a = wais.mod$coefficients[1]
# beta
b = wais.mod$coefficients[2]
# this is beta = (a,b)'
print(c(a,b))
# compute the variance/covariance matrix for parameter estimates
V.hat = vcov(wais.mod)
print(V.hat)
wais.mod = glm(senile/n ~ wais,weights=n, family=binomial, data=wais.data)
# define the intercept and slope parameter estimates
# alpha
a = wais.mod$coefficients[1]
# beta
b = wais.mod$coefficients[2]
# this is beta = (a,b)'
print(c(a,b))
# compute the variance/covariance matrix for parameter estimates
V.hat = vcov(wais.mod)
print(V.hat)
wais.mod = glm(senile/n ~ wais,weights=n, family=binomial, data=wais.data)
# define the intercept and slope parameter estimates
# alpha
a = wais.mod$coefficients[1]
# beta
b = wais.mod$coefficients[2]
# this is beta = (a,b)'
print(c(a,b))
# compute the variance/covariance matrix for parameter estimates
V.hat = vcov(wais.mod)
print(V.hat)
wais.mod = glm(senile/n ~ wais,weights=n, family=binomial, data=wais.data)
# define the intercept and slope parameter estimates
# alpha
a = wais.mod$coefficients[1]
# beta
b = wais.mod$coefficients[2]
# this is beta = (a,b)'
print(c(a,b))
# compute the variance/covariance matrix for parameter estimates
V.hat = vcov(wais.mod)
print(V.hat)
# this is beta = (a,b)'
print(c(a,b))
# this is beta = (a,b)'
print(c(a,b))
# compute the variance/covariance matrix for parameter estimates
V.hat = vcov(wais.mod)
print(V.hat)
options(tinytex.engine_args = '-shell-escape')
options(tinytex.engine_args = '-shell-escape')
wais.mod = glm(senile/n ~ wais,weights=n, family=binomial, data=wais.data)
wais.data <- data.frame(
wais=c(4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),
n=c(2,1,2,3,2,6,6,6,2,6,7,3,4,1,1),
senile=c(1,1,1,2,2,2,2,1,0,1,2,0,0,0,0))
print(wais.data)
wais.mod = glm(senile/n ~ wais,weights=n, family=binomial, data=wais.data)
# define the intercept and slope parameter estimates
# alpha
a = wais.mod$coefficients[1]
# beta
b = wais.mod$coefficients[2]
# this is beta = (a,b)'
print(c(a,b))
# compute the variance/covariance matrix for parameter estimates
V.hat = vcov(wais.mod)
print(V.hat)
# compute an estimate of the odds ratio
theta <- exp(b)
# compute a 95% confidence interval estimate for the odds ratio
L.theta = exp(L.beta)
# compute the s.e. for beta.hat from the estimated variance/covariance matrix
se.b = sqrt(V.hat[2,2])
# compute a 95% confidence interval estimate for beta
L.beta = b - 1.96*se.b
U.beta = b + 1.96*se.b
print(b)
print(c(L.beta,U.beta))
# compute an estimate of the odds ratio
theta <- exp(b)
# compute a 95% confidence interval estimate for the odds ratio
L.theta = exp(L.beta)
U.theta = exp(U.beta)
# print confidence interval
print(c(L.theta,U.theta))
xo <- 10
L.hat <- a + b*xo # should agree with L0.hat below
x0 = as.matrix(c(1,xo))
print(x0)
beta.hat = as.matrix(c(a,b))
L0.hat = t(x0) %*% beta.hat
se0 = sqrt(t(x0)%*%V.hat%*%x0)
print(c(L0.hat,se0))
L.L0 = L0.hat - 1.96*se0
U.L0 = L0.hat + 1.96*se0
print(c(L.L0,U.L0))
print(xo)
print(L.hat)
print(L0.hat)
se.b
pi.hat <- exp(L.hat) / (1+exp(L.hat))
print(pi.hat)
print(c(L.L0,U.L0))
pi.hat <- exp(L.hat) / (1+exp(L.hat))
print(pi.hat)
print(c(L.L0,U.L0))
pi.hat <- exp(L.hat) / (1+exp(L.hat))
print(pi.hat)
print(c(exp(L.L0) / (1+exp(L.L0)),exp(U.L0) / (1+exp(U.L0))))
pi.hat <- exp(L.hat) / (1+exp(L.hat))
#print(pi.hat)
print(c(exp(L.L0) / (1+exp(L.L0)),exp(U.L0) / (1+exp(U.L0))))
rm(list = ls())
