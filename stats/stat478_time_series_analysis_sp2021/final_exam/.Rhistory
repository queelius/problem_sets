#############################################################
plot(ols.fit$residuals)
acf(ols.fit$residuals)
pacf(ols.fit$residuals)
#############################################################
# part (b)
# Examine the residuals from your fitted model for normality and independence.
# Display the sample ACF. Do the residuals look to resemble a normal, zero mean
# white noise process?
#############################################################
plot(ols.fit$residuals)
acf(ols.fit$residuals)
#############################################################
# part (b)
# Examine the residuals from your fitted model for normality and independence.
# Display the sample ACF. Do the residuals look to resemble a normal, zero mean
# white noise process?
#############################################################
plot(ols.fit$residuals)
acf(ols.fit$residuals)
pacf(ols.fit$residuals)
auto.arima(temps)
library(forecast)
arima.auto(temps)
auto.arima(temps)
# calculte phi fot the Cochrane Method
N=length(temps)
phi.hat=lm(ols.fit$residual[2:N]~0+ols.fit$residual[1:(N-1)])$coeff
# transform y and x according to the Cochrane Method
y.trans=temps[2:N]-phi.hat*temps[1:(N-1)]
x.trans=time(temps)[2:N]-phi.hat*time(temps)[1:(N-1)]
# fit OLS regression with transformed data
coch.or=lm(y.trans~x.trans)
summary(coch.or)
summary(ols.fit)
plot(temps)
# not stationary, taking difference
dtemps=diff(temps)
plot(dtemps)
qqnorm(dtemps)
acf(dtemps)
pacf(dtemps)
qqnorm(dtemps)
acf(dtemps)
pacf(dtemps)
# let's do ljung-box test
Box.test(dtemps,lag=10)
# let's do ljung-box test
Box.test(dtemps,lag=10,type="Ljung-Box")
# let's see if it already models white noise
# using the Ljung-Box test
Box.test(dtemps,lag=10,type="Ljung-Box")
mean(dtemps)
zero=dtemps - mean(dtemps)
Box.test(zero,lag=10,type="Ljung-Box")
plot(dtemps)
qqnorm(dtemps)
acf(dtemps)
pacf(dtemps)
acf(dtemps)
plot(dtemps)
qqnorm(dtemps)
acf(dtemps)
pacf(dtemps)
acf(dtemps)
acf(dtemps)
pacf(dtemps)
pacf(dtemps)
acf(dtemps)
auto.arima(temps)
# let's look at eacf:
eacf(dtemps)
# let's look at eacf:
librarey(TSA)
# let's look at eacf:
library(TSA)
eacf(dtemps)
# using the Ljung-Box test
Box.test(resid(dtemps.ar3),lag=10,type="Ljung-Box")
# so, preliminary conclusion: arima(p=0,d=1,q=3).
# let's fit that model to the data and do some tests
temps.arima013=Arima(temps,order=c(0,1,3))
# using the Ljung-Box test
Box.test(resid(temps.arima013),lag=10,type="Ljung-Box")
plot(resid(temps.arima013))
acf(resid(temps.arima013))
pacf(resid(temps.arima013))
qqnorm(resid(temps.arima013))
plot(dtemps)
qqnorm(dtemps)
plot(dtemps)
plot(temps)
plot(log(temps))
# not stationary, taking difference.
dtemps=diff(temps)
plot(dtemps)
qqnorm(dtemps)
plot(dtemps)
pacf(resid(temps.arima013))
# let's look at a more objective test statistic, the Ljung-Box test.
Box.test(dtemps,lag=10,type="Ljung-Box")
# let's look at a more objective test statistic, the Ljung-Box test.
Box.test(resid(temps.arima013),lag=10,type="Ljung-Box")
# let's look at a more objective test statistic, the Ljung-Box test.
Box.test(resid(temps.arima013,fitdf=3),lag=10,type="Ljung-Box")
# let's look at a more objective test statistic, the Ljung-Box test.
Box.test(resid(temps.arima013,fitdf=4),lag=10,type="Ljung-Box")
# out of curiosity, let's use auto.arima to have it select an ARIMA model
# based on the minimum AIC measure.
auto.arima(temps)
# let's fit that model to the data and do some tests
temps.arima013=Arima(temps,order=c(3,1,0))
# let's fit that model to the data and do some tests
temps.arima310=Arima(temps,order=c(3,1,0))
# let's see if the evidence that the residuals model white noise
plot(resid(temps.arima310))
acf(resid(temps.arima310))
pacf(resid(temps.arima310))
qqnorm(resid(temps.arima310))
# let's look at a more objective test statistic, the Ljung-Box test.
Box.test(resid(temps.arima310,fitdf=3),lag=10,type="Ljung-Box")
# out of curiosity, let's use auto.arima to have it select an ARIMA model
# based on the minimum AIC measure.
auto.arima(temps)
summary(temps.arima310)
# out of curiosity, let's use auto.arima to have it select an ARIMA model
# based on the minimum AIC measure.
auto.arima(temps)
ps=arima.sim(n=100000,model=list(ar=c(-0.3351243,-0.3245378,-0.3387609)))
coef(auto.arima(ps))
coef(round(auto.arima(ps),digits=3)
# it chose the same model, ar(3). we conclude that the ARIMA(3,1,0) model
# is a reasonable way to model the data in temps.
# the estimated paramters of the model are given by
coef(temps.arima310)
# it chose the same model, ar(3). we conclude that the ARIMA(3,1,0) model
# is a reasonable way to model the data in temps.
# the estimated paramters of the model are given by
coef(temps.arima310)
# it chose the same model, ar(3). we conclude that the ARIMA(3,1,0) model
# is a reasonable way to model the data in temps.
# the estimated paramters of the model are given by
coef(round(temps.arima310))
# it chose the same model, ar(3). we conclude that the ARIMA(3,1,0) model
# is a reasonable way to model the data in temps.
# the estimated paramters of the model are given by
round(coef(temps.arima310),3)
# it chose the same model, ar(3). we conclude that the ARIMA(3,1,0) model
# is a reasonable way to model the data in temps.
# the estimated paramters of the model are given by
coef(temps.arima310)
# theta=(-0.3351243,-0.3245378,-0.3387609)
# we can simulate drawing data the process with:
#     arima.sim(n=200,model=list(ar=c(-0.3351243,-0.3245378,-0.3387609)))
summary(temps.arima310)
summary(temps.arima310)
############################################################
# Consider the yearly global temperature data in period 1900-1997. The data set
# is given on blackboard. You may use the following to read in the data and make
# it a time series:
#  dt=read.table(”your directory/globaltemps.txt”, header=T)
#  temps=ts(dt$Temps, start=1900)
#############################################################
globaltemps.dt=read.table("globaltemps.txt", header=T)
temps=ts(globaltemps.dt$Temps, start=1900)
#############################################################
# part (a)
# Fit a simple linear regression model to the data, where y t is the yearly
# global temperature x t is time. Report the ANOVA table and summary for the
# model coefficients. Plot of the data with the least squares regression line
# overlaid.
#############################################################
ols.fit=lm(temps~time(temps),data=temps)
plot(temps)
abline(lm(temps ~ time(temps)))
summary(ols.fit)
summary(ols.fit)
#############################################################
# part (b)
# Examine the residuals from your fitted model for normality and independence.
# Display the sample ACF. Do the residuals look to resemble a normal, zero mean
# white noise process?
#############################################################
plot(ols.fit$residuals)
qqnorm(ols.fit$residuals)
#############################################################
# part (b)
# Examine the residuals from your fitted model for normality and independence.
# Display the sample ACF. Do the residuals look to resemble a normal, zero mean
# white noise process?
#############################################################
plot(ols.fit$residuals)
dwtest(ols.fit)
#############################################################
# part (c)
# Conduct a Durbin-Watson test on the residuals. Comment on your conclusion
#############################################################
library(lmtest)
dwtest(ols.fit)
##################
# part (f)
##################
plot(forecast(temps,model=temps.auto,h=50))
##################
# part (f)
##################
plot(forecast(temps,model=temps.arima310,h=50))
#############################################################
# part (a)
# Construct a time plot of the data and describe any patterns in terms of
# overall trend and seasonality. Also construct ACF ad PACF plots. Describe any
# patterns you notice on ACF and PACF.
#############################################################
plot.ts(tb)
acf(tb)
pacf(tb)
acf(tb)
pacf(tb)
acf(tb)
pacf(tb)
acf(tb)
#############################################################
# part (b)
# Fit an additive model using the Holt-Winters method. Let the function choose
# the optimal smoothing parameters automatically. Report the smoothing
# parameters and coefficients. Superimpose the fitted values on the time plot.
#############################################################
library(forecast)
hw.add=hw(tb, seasonal="additive", initial="optimal")
hw.add$model	# get the coefficients
ts.plot(tb,hw.add$fitted,col=c("black","red"))
auto.arima(tb)
acf(tb)
pacf(tb)
############################################################
# Consider the yearly global temperature data in period 1900-1997. The data set
# is given on blackboard. You may use the following to read in the data and make
# it a time series:
#  dt=read.table(”your directory/globaltemps.txt”, header=T)
#  temps=ts(dt$Temps, start=1900)
#############################################################
globaltemps.dt=read.table("globaltemps.txt", header=T)
temps=ts(globaltemps.dt$Temps, start=1900)
abline(lm(temps ~ time(temps)))
plot(temps)
abline(lm(temps ~ time(temps)))
summary(ols.fit)
#############################################################
# part (b)
# Examine the residuals from your fitted model for normality and independence.
# Display the sample ACF. Do the residuals look to resemble a normal, zero mean
# white noise process?
#############################################################
plot(ols.fit$residuals)
acf(ols.fit$residuals)
pacf(ols.fit$residuals)
#############################################################
# part (b)
# Examine the residuals from your fitted model for normality and independence.
# Display the sample ACF. Do the residuals look to resemble a normal, zero mean
# white noise process?
#############################################################
plot(ols.fit$residuals)
# let me try fitting the model to an arima model with drift.
temps.arima310.d=Arima(temps,order=c(3,1,0),include.drift=TRUE)
plot(forecast(temps.arima310.d,h=5))
# this may be more realistic. out of curiosity, i forecast further ahead.
plot(forecast(temps.arima310.d,h=50))
plot(forecast(temps.arima310,h=50))
# this may be more realistic. out of curiosity, i forecast further ahead.
plot(forecast(temps.arima310.d,h=50))
lines(forecast(temps.arima310,h=50))
plot(forecast(temps.arima310,h=50))
# this may be more realistic. out of curiosity, i forecast further ahead.
plot(forecast(temps.arima310.d,h=50))
plot(forecast(temps.arima310,h=50))
plot(forecast(temps.arima310,h=50))
auto.arima(temps,allowdrift=TRUE)
auto.arima(temps,include.drift=TRUE)
auto.arima(temps,allowdrift=TRUE)
auto.arima(temps,include.constant=T,allowdrift=TRUE)
auto.arima(temps,include.mean=T,allowdrift=TRUE)
plot(forecast(auto.arima(temps,include.mean=T,allowdrift=TRUE)))
plot(forecast(auto.arima(temps,include.mean=T,allowdrift=TRUE)),h=50)
plot(forecast(auto.arima(temps,include.mean=T,allowdrift=TRUE),h=50))
forecast(auto.arima(temps,include.mean=T,allowdrift=TRUE),h=50)
plot(fc)
fc=forecast(auto.arima(temps,include.mean=T,allowdrift=TRUE),h=50)
plot(fc)
summary(m2)
m2=auto.arima(temps,include.mean=T,allowdrift=TRUE)
summary(m2)
summary(temps.arima310.d)
# let me try fitting the model to an arima model with drift.
temps.autoarima.d=auto.arima(temps,include.mean=T)
plot(forecast(temps.arima310.d,h=5))
plot(forecast(temps.arima310.d,h=50))
summary(temps.arima310.d)
# let me try fitting the model to an arima model with drift.
temps.autoarima.d=auto.arima(temps,include.mean=T)
plot(forecast(temps.arima310.d,h=50))
summary(temps.arima310.d)
plot(forecast(temps.arima310.d,h=5))
plot(forecast(temps.autoarima.d,h=5))
plot(forecast(temps.autoarima.d,h=50))
summary(temps.autoarima.d)
tb.diff=diff(tb)
plot(tb.diff)
tb.diff=diff(tb)
plot(tb.diff)
acf(tb.diff)
pacf(tb.diff)
acf(tb.diff)
tb.diff.seasonal=diff(tb.diff,lag=12)
plot(tb.diff.seasonal)
pacf(tb.diff.seasonal)
tb.diff.seasonal=diff(tb,lag=12)
plot(tb.diff.seasonal)
acf(tb.diff.seasonal)
pacf(tb.diff.seasonal)
tb.diff.seasonal=diff(tb.diff,lag=1)
plot(tb.diff.seasonal)
plot(tb.diff.seasonal)
acf(tb.diff.seasonal)
pacf(tb.diff.seasonal)
tb.diff.seasonal=diff(tb.diff,lag=12)
plot(tb.diff.seasonal)
acf(tb.diff.seasonal)
pacf(tb.diff.seasonal)
tb.seasonal.diff=diff(tb,lag=12)
plot(tb.diff.seasonal)
acf(tb.diff.seasonal)
pacf(tb.diff.seasonal)
tb.seasonal.diff=diff(tb,lag=12)
plot(tb.seasonal.diff)
acf(tb.seasonal.diff)
pacf(tb.seasonal.diff)
plot(tb.seasonal.diff)
# this looks better. in fact, is it white noise?
acf(tb.seasonal.diff)
pacf(tb.seasonal.diff)
auto.arima(tb)
auto.arima(tb.seasonal.diff)
auto.arima(tb.seasonal.diff)
auto.arima(tb)
plot(tb.seasonal.diff.diff)
tb.seasonal.diff.diff=diff(tb.seasonal.diff)
plot(tb.seasonal.diff.diff)
#############################################################
# part (a)
# Construct a time plot of the data and describe any patterns in terms of
# overall trend and seasonality. Also construct ACF ad PACF plots. Describe any
# patterns you notice on ACF and PACF.
#############################################################
plot.ts(tb)
#############################################################
# part (a)
# Construct a time plot of the data and describe any patterns in terms of
# overall trend and seasonality. Also construct ACF ad PACF plots. Describe any
# patterns you notice on ACF and PACF.
#############################################################
plot.ts(log(tb))
#############################################################
# part (a)
# Construct a time plot of the data and describe any patterns in terms of
# overall trend and seasonality. Also construct ACF ad PACF plots. Describe any
# patterns you notice on ACF and PACF.
#############################################################
plot.ts(log(log(tb)))
#############################################################
# part (a)
# Construct a time plot of the data and describe any patterns in terms of
# overall trend and seasonality. Also construct ACF ad PACF plots. Describe any
# patterns you notice on ACF and PACF.
#############################################################
plot.ts(tb)
model=auto.arima(tb)
#############################################################
# part (d)
# Check residuals from your SARIMA model for normality (histogram, qq-plot), for
# independence (ACF and the Ljung-Box test). Comment on your findings.
#############################################################
qqplot(resid(model))
#############################################################
# part (d)
# Check residuals from your SARIMA model for normality (histogram, qq-plot), for
# independence (ACF and the Ljung-Box test). Comment on your findings.
#############################################################
qqnorm(resid(model))
histo(resid(model))
hist(resid(model))
summary(model)
#############################################################
# part (e)
# Choose a final model (with the smallest AIC) between Holt-Winters and SARIMA.
# Report your selection and calculate the forecasts with prediction intervals
# for 5 future values. Display the forecasts and prediction bands visually.
#############################################################
chosen_model=model
plot(forecast(temps,model=chosen_model,h=5))
plot(forecast(tb,model=chosen_model,h=5))
model2=auto.arima(tb.seasonal.diff,include.mean=T,allowdrift = T)
model2=auto.arima(tb,include.mean=T,allowdrift = T)
#############################################################
# part (e)
# Choose a final model (with the smallest AIC) between Holt-Winters and SARIMA.
# Report your selection and calculate the forecasts with prediction intervals
# for 5 future values. Display the forecasts and prediction bands visually.
#############################################################
chosen_model=model2
plot(forecast(tb,model=chosen_model,h=5))
summary(model2)
summary(model)
plot(forecast(tb,model=chosen_model,h=50))
# let's remove this seasonal effect
tb.s12=diff(tb,lag=12)
plot(tb.s12)
tb.s12.diff=diff(tb)
tb.s12.diff=diff(tb.s12)
plot(tb.s12.diff)
auto.arima(tb.s12.diff)
ts.plot(tb,hw.add$fitted,col=c("black","red"))
hw.add$aic
hw.add=hw(tb, seasonal="additive", initial="optimal")
hw.add$model	# get the coefficients
ts.plot(tb,hw.add$fitted,col=c("black","red"))
hw.add$aic
hw
hw$aic
hw.add$model
hw.add$model$aic
model$aic
arima.model=auto.arima(tb)
plot(forecast(tb,model=arima.model,h=50))
plot(forecast(tb,model=hw.add,h=50))
plot(forecast(tb,model=arima.model,h=50))
plot(forecast(tb,model=hw.add,h=50))
plot(forecast(tb,model=arima.model,h=50))
# so, we choose the arima model as our final model. here is the forecast.
plot(forecast(tb,model=arima.model,h=5))
plot(forecast(tb,model=hw.add,h=5))
plot(forecast(tb,model=hw.add,h=50))
# so, we choose the arima model as our final model. here is the forecast.
plot(forecast(tb,model=arima.model,h=50))
# so, we choose the arima model as our final model. here is the forecast.
plot(forecast(tb,model=arima.model,h=5))
hw.add$model$aic
arima.model$aic
# let's remove this seasonal effect.
tb.s12=diff(tb,lag=12)
# first, we strongly suspect s=12.
# let's remove this seasonal effect.
tb.s12=diff(tb,lag=12)
plot(tb.s12)
plot(tb.s12.diff)
acf(tb.s12.diff)
pacf(tb.s12.diff)
auto.arima(tb.s12.diff)
# first, we strongly suspect s=12.
# let's remove this seasonal effect.
tb.s12=ts(diff(tb,lag=12),frequency=1)
plot(tb.s12)
# seasonality seems to have went away, but still non-stationary. let's remove
# within season non-stationarity with a difference.
tb.s12.diff=diff(tb,lag=12)
plot(tb.s12.diff)
auto.arima(tb.s12.diff)
auto.arima(tb.s12)
# seasonality seems to have went away, but still non-stationary. let's remove
# within season non-stationarity with a difference.
tb.s12.diff=diff(tb.s12)
plot(tb.s12.diff)
acf(tb.s12.diff)
pacf(tb.s12.diff)
auto.arima(tb.s12.diff)
auto.arima(tb)
acf(tb.s12.diff)
acf(tb.s12)
pacf(tb.s12)
auto.arima(tb)
auto.arima(tb.s12.diff)
summary(arima.model)
tb1=ts(tb,frequency=1)
summary(arima.model)
arima.model=auto.arima(tb1)
summary(arima.model)
# it seems to be that this is a seasonal arima with s=12, D=1. if auto.arima
# chooses a simple model compatible with those values, i'm inclined to accept
# it if the residuals look good.
arima.model=auto.arima(tb)
summary(model)
#############################################################
# part (d)
# Check residuals from your SARIMA model for normality (histogram, qq-plot), for
# independence (ACF and the Ljung-Box test). Comment on your findings.
#############################################################
qqnorm(resid(model))
#############################################################
# part (d)
# Check residuals from your SARIMA model for normality (histogram, qq-plot), for
# independence (ACF and the Ljung-Box test). Comment on your findings.
#############################################################
qqnorm(resid(arima.model))
hist(resid(arima.model))
Box.test(resid(arima.model,fitdf=1),lag=10,type="Ljung-Box")
acf(resid(arima.model))
pact(resid(arima.model))
pacf(resid(arima.model))
summary(model)
coef(summary(model))
coef(model)
summary(arima.model)
